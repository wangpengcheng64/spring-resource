Spring AOP注解解析
AOP是用于降低逻辑与系统级服务（交叉业务逻辑）间的耦合度，将系统级服务在运行时织入到主业务逻辑中。
Spring的AOP的底层工作原理是使用动态代理对主业务进行增强，而动态代理使用的是JDK的Proxy与CGLB两种动态代理。
AOP术语简单介绍：
    1，切面（Aspect）：一个关注点的模块化，这个关注点实现可能另外横切多个对象。切面用Spring的Advisor或拦截器实现。
    2，连接点（Joinpoint）：程序执行过程中明确的点，如方法的调用或特定的异常被抛出。
    3，通知（Advice）：在特定的连接点，AOP框架执行的动作。
        前置通知（Before）：在目标方法被调用之前调用通知功能；
        后置通知（After）：在目标方法完成之后调用通知，此时不会关心方法的输出是什么；
        返回通知（After-returning）：在目标方法成功执行之后调用通知；
        异常通知（After-throwing）：在目标方法抛出异常后调用通知；
        环绕通知（Around）：通知包裹了被通知的方法，在被通知的方法调用之前和调用之后执行自定义的行为。
    4，切入点（Pointcut）：指定一个通知将被引发的一系列连接点的集合。
    5，引入（Introduction）：添加方法或字段到被通知的类。Spring允许引入新的接口到任何被通知的对象。
    6，目标对象（Target Object）：包含连接点的对象，也被称作被通知或被代理对象。
    7，AOP代理（AOP Proxy）：AOP框架创建的对象，包含通知。AOP代理可以是JDK动态代理或CGLIB代理。
    8，织入（Weaving）：将通知添加对目标类具体连接点上的过程。
-------------------------aop代理入口-------------------------
查看《Spring容器初始化--创建BeanFactory及加载Bean定义信息(三)》可以了解到<aop>标签解析过程
首先通过命名空间可以在类路径下的spring.handlers中找到对应的处理器，在spring.schemas中找到对应的xsd文件
获取到注解对应的处理器：http\://www.springframework.org/schema/aop=org.springframework.aop.config.AopNamespaceHandler
public class AopNamespaceHandler extends NamespaceHandlerSupport {
    // 注册对应的解析器
    @Override
    public void init() {
        // In 2.0 XSD as well as in 2.1 XSD.
        registerBeanDefinitionParser("config", new ConfigBeanDefinitionParser());
        registerBeanDefinitionParser("aspectj-autoproxy", new AspectJAutoProxyBeanDefinitionParser());
        registerBeanDefinitionDecorator("scoped-proxy", new ScopedProxyBeanDefinitionDecorator());

        // Only in 2.0 XSD: moved to context namespace as of 2.1
        registerBeanDefinitionParser("spring-configured", new SpringConfiguredBeanDefinitionParser());
    }
}
<aop:aspectj-autoproxy />标签对应的解析器是：AspectJAutoProxyBeanDefinitionParser，并且执行其parse()方法
class AspectJAutoProxyBeanDefinitionParser implements BeanDefinitionParser {
    AspectJAutoProxyBeanDefinitionParser() {
    }

    public BeanDefinition parse(Element element, ParserContext parserContext) {
        // 注册AnnotationAwareAspectJAutoProxyCreator
        AopNamespaceUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(parserContext, element);
        // 对注解的子节点处理，扩展操作
        this.extendBeanDefinition(element, parserContext);
        return null;
    }
    private void extendBeanDefinition(Element element, ParserContext parserContext) {
        // 获取internalAutoProxyCreator的Bean定义信息
        BeanDefinition beanDef =
                parserContext.getRegistry().getBeanDefinition(AopConfigUtils.AUTO_PROXY_CREATOR_BEAN_NAME);
        // <aop:aspectj-autoproxy />标签是否有子标签
        if (element.hasChildNodes()) {
            addIncludePatterns(element, parserContext, beanDef);
        }
    }
    private void addIncludePatterns(Element element, ParserContext parserContext, BeanDefinition beanDef) {
		ManagedList<TypedStringValue> includePatterns = new ManagedList<TypedStringValue>();
		// 获取到所有的子标签<aop:include name="" />
		NodeList childNodes = element.getChildNodes();
		for (int i = 0; i < childNodes.getLength(); i++) {
			Node node = childNodes.item(i);
			if (node instanceof Element) {
				Element includeElement = (Element) node;
				// 获取标签的name属性值
				TypedStringValue valueHolder = new TypedStringValue(includeElement.getAttribute("name"));
				valueHolder.setSource(parserContext.extractSource(includeElement));
				includePatterns.add(valueHolder);
			}
		}
		if (!includePatterns.isEmpty()) {
			includePatterns.setSource(parserContext.extractSource(element));
			// 给internalAutoProxyCreator的Bean定义includePatterns属性赋值
			// 在获取Advisor时会使用，用于正则校验
			beanDef.getPropertyValues().add("includePatterns", includePatterns);
		}
	}
}
public abstract class AopNamespaceUtils {
    public static final String PROXY_TARGET_CLASS_ATTRIBUTE = "proxy-target-class";
    private static final String EXPOSE_PROXY_ATTRIBUTE = "expose-proxy";

    public static void registerAspectJAnnotationAutoProxyCreatorIfNecessary(
            ParserContext parserContext, Element sourceElement) {
        // 注册AnnotationAwareAspectJAutoProxyCreator，获取bean定义信息
        BeanDefinition beanDefinition = AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(
                parserContext.getRegistry(), parserContext.extractSource(sourceElement));
        // 解析<aop:aspectj-autoproxy />标签的"proxy-target-class"及"expose-proxy"属性
        useClassProxyingIfNecessary(parserContext.getRegistry(), sourceElement);
        // 注册组件并通知，便于监听器做进一步处理
        registerComponentIfNecessary(beanDefinition, parserContext);
    }

    private static void useClassProxyingIfNecessary(BeanDefinitionRegistry registry, Element sourceElement) {
        if (sourceElement != null) {
            // 用来设置JDK动态代理和CGLIB动态代理之间的切换
            // 默认为false表示使用JDK动态代理，设置为true则是强制使用CGLIB动态代理
            boolean proxyTargetClass = Boolean.valueOf(sourceElement.getAttribute(PROXY_TARGET_CLASS_ATTRIBUTE));
            if (proxyTargetClass) {
                AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry);
            }
            // 暴露当前的代理对象，默认值为false，springAOP只会拦截代理对象的public方法，不会拦截provided和private方法，
            // 并且不会拦截public方法内部调用的其他方法，也就是说只会拦截代理对象的方法，即增强的是代理对象，而不是原对象。
            // 设置为true，拦截器会获取代理对象，并且将代理对象转换成原对象。从而对内部调用的方法进行增强。
            boolean exposeProxy = Boolean.valueOf(sourceElement.getAttribute(EXPOSE_PROXY_ATTRIBUTE));
            if (exposeProxy) {
                AopConfigUtils.forceAutoProxyCreatorToExposeProxy(registry);
            }
        }
    }
}
public abstract class AopConfigUtils {
    public static final String AUTO_PROXY_CREATOR_BEAN_NAME = "org.springframework.aop.config.internalAutoProxyCreator";
    public static BeanDefinition registerAspectJAnnotationAutoProxyCreatorIfNecessary(BeanDefinitionRegistry registry, Object source) {
        return registerOrEscalateApcAsRequired(AnnotationAwareAspectJAutoProxyCreator.class, registry, source);
    }
    public static void forceAutoProxyCreatorToUseClassProxying(BeanDefinitionRegistry registry) {
        // 给internalAutoProxyCreator定义新增proxyTargetClass=true属性
        if (registry.containsBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME)) {
            BeanDefinition definition = registry.getBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME);
            definition.getPropertyValues().add("proxyTargetClass", Boolean.TRUE);
        }
    }
    public static void forceAutoProxyCreatorToExposeProxy(BeanDefinitionRegistry registry) {
        // 给internalAutoProxyCreator定义新增exposeProxy=true属性
        if (registry.containsBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME)) {
            BeanDefinition definition = registry.getBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME);
            definition.getPropertyValues().add("exposeProxy", Boolean.TRUE);
        }
    }
    private static BeanDefinition registerOrEscalateApcAsRequired(Class<?> cls, BeanDefinitionRegistry registry, Object source) {
        Assert.notNull(registry, "BeanDefinitionRegistry must not be null");
        // 如果Bean定义注册容器中已存在name="org.springframework.aop.config.internalAutoProxyCreator"的Bean定义
        if (registry.containsBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME)) {
            BeanDefinition apcDefinition = registry.getBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME);
            // 获取Bean定义信息，如果与现在需要注册的Bean不一致，则按优先级进行选择
            if (!cls.getName().equals(apcDefinition.getBeanClassName())) {
                // 容器中已注册bean的优先级
                int currentPriority = findPriorityForClass(apcDefinition.getBeanClassName());
                // 当前需要注册bean的优先级
                int requiredPriority = findPriorityForClass(cls);
                // 容器中已注册bean的优先级 小于 当前需要注册bean的优先级，则替换Bean的className属性值
                if (currentPriority < requiredPriority) {
                    apcDefinition.setBeanClassName(cls.getName());
                }
            }
            return null;
        } else {
            // 如果Bean定义注册容器中不存在，则新建Bean定义信息，并注册到容器中
            RootBeanDefinition beanDefinition = new RootBeanDefinition(cls);
            beanDefinition.setSource(source);
            beanDefinition.getPropertyValues().add("order", Ordered.HIGHEST_PRECEDENCE);
            beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
            registry.registerBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME, beanDefinition);
            return beanDefinition;
        }
    }
}
-------------------------创建aop代理对象之主流程-------------------------
首先来了解下创建Bean时各BeanPostProcessor中方法的执行顺序（在《Spring容器初始化--Bean的实例化过程(三)之createBean方法》有介绍）
1）、createBean() -> resolveBeforeInstantiation();
    执行InstantiationAwareBeanPostProcessor的postProcessBeforeInstantiation()方法
    执行BeanPostProcessor的postProcessAfterInitialization()方法
2）、doCreateBean() -> applyMergedBeanDefinitionPostProcessors();
    执行MergedBeanDefinitionPostProcessor的postProcessMergedBeanDefinition(mbd, beanType, beanName)方法
3）、doCreateBean() -> initializeBean()
    执行BeanPostProcessor的postProcessBeforeInitialization()方法
    执行BeanNameAware\BeanClassLoaderAware\BeanFactoryAware的各方法
    执行BeanPostProcessor的postProcessAfterInitialization()方法

-------------------------AnnotationAwareAspectJAutoProxyCreator继承关系图-------------------------
根据创建Bean时各BeanPostProcessor中方法的执行顺序及AnnotationAwareAspectJAutoProxyCreator继承关系图
定位到AbstractAutoProxyCreator的postProcessBeforeInstantiation()/postProcessAfterInitialization()方法
public abstract class AbstractAutoProxyCreator extends ProxyProcessorSupport
		implements SmartInstantiationAwareBeanPostProcessor, BeanFactoryAware {
    public Object postProcessBeforeInstantiation(Class<?> beanClass, String beanName) throws BeansException {
        // 为给定的bean类和bean名称构建一个缓存键
		Object cacheKey = getCacheKey(beanClass, beanName);
        // beanName不为null || 当前Bean已存在targetSourcedBeans集合中，表示已经处理过
		if (beanName == null || !this.targetSourcedBeans.contains(beanName)) {
		    // 在advisedBeans容器中存在，说明已经判断了是否需要处理
			if (this.advisedBeans.containsKey(cacheKey)) {
				return null;
			}
			// 不可以被代理的类：基类(Advices, Advisors and AopInfrastructureBeans)，aop注解类(@Aspect)
            // 子类可以复写该类，如果一些情况不需要被代理, shouldSkip返回true
			if (isInfrastructureClass(beanClass) || shouldSkip(beanClass, beanName)) {
				this.advisedBeans.put(cacheKey, Boolean.FALSE);
				return null;
			}
		}
		if (beanName != null) {
		    // TargetSource(目标源)是被代理的target(目标对象)实例的来源
		    // 获取targetSource, 如果存在则直接在对象初始化之前进行创建代理, 避免了目标对象不必要的实例化
			TargetSource targetSource = getCustomTargetSource(beanClass, beanName);
			//targetSource不为null，创建代理对象
			if (targetSource != null) {
				this.targetSourcedBeans.add(beanName);
				// 获取当前bean的Advices和Advisors，由子类实现
				Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(beanClass, beanName, targetSource);
				// 创建代理对象，返回
				Object proxy = createProxy(beanClass, beanName, specificInterceptors, targetSource);
				// 缓存Bean对应的代理对象的类型
				this.proxyTypes.put(cacheKey, proxy.getClass());
				return proxy;
			}
		}
		return null;
	}
	public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
		if (bean != null) {
			Object cacheKey = getCacheKey(bean.getClass(), beanName);
			if (!this.earlyProxyReferences.contains(cacheKey)) {
			    // 如果Bean需要被代理，则使用配置的拦截器创建代理
				return wrapIfNecessary(bean, beanName, cacheKey);
			}
		}
		return bean;
	}
    protected Object getCacheKey(Class<?> beanClass, String beanName) {
        // beanName不为null && beanName不为空
        if (StringUtils.hasLength(beanName)) {
            // beanClass是否属于FactoryBean类型
            return (FactoryBean.class.isAssignableFrom(beanClass) ?
                    BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName);
        }
        else {
            return beanClass;
        }
    }
    protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) {
        // beanName不为null || 当前Bean已存在targetSourcedBeans集合中，表示已经处理过
        if (beanName != null && this.targetSourcedBeans.contains(beanName)) {
            return bean;
        }
        // 在advisedBeans容器中存在切被标识不需要处理
        if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {
            return bean;
        }
        // 不可以被代理的类：基类(Advices, Advisors and AopInfrastructureBeans)，aop注解类(@Aspect)
        // 子类可以复写该类,如果一些情况不需要被代理, shouldSkip返回true
        if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) {
            this.advisedBeans.put(cacheKey, Boolean.FALSE);
            return bean;
        }
        // 获取当前bean的Advices和Advisors，由子类实现
        Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null);
        // 如果需要做增强处理
        if (specificInterceptors != DO_NOT_PROXY) {
            this.advisedBeans.put(cacheKey, Boolean.TRUE);
            // 创建代理对象，返回
            Object proxy = createProxy(bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean));
            this.proxyTypes.put(cacheKey, proxy.getClass());
            return proxy;
        }
        this.advisedBeans.put(cacheKey, Boolean.FALSE);
        return bean;
    }
    protected boolean isInfrastructureClass(Class<?> beanClass) {
        // 是否属于Advice || Pointcut || Advisor || AopInfrastructureBean类型
        boolean retVal = Advice.class.isAssignableFrom(beanClass) ||
                Pointcut.class.isAssignableFrom(beanClass) ||
                Advisor.class.isAssignableFrom(beanClass) ||
                AopInfrastructureBean.class.isAssignableFrom(beanClass);
        if (retVal && logger.isTraceEnabled()) {
            logger.trace("Did not attempt to auto-proxy infrastructure class [" + beanClass.getName() + "]");
        }
        return retVal;
    }
}
