Spring AOP注解解析
-------------------------创建aop代理对象之createProxy-------------------------
public abstract class AbstractAutoProxyCreator extends ProxyProcessorSupport
		implements SmartInstantiationAwareBeanPostProcessor, BeanFactoryAware {
    protected Object createProxy(
            Class<?> beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource) {
        if (this.beanFactory instanceof ConfigurableListableBeanFactory) {
            // 公开指定bean的给定目标类
            AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName, beanClass);
        }
        // 初始化代理工厂ProxyFactory
        ProxyFactory proxyFactory = new ProxyFactory();
        // 复制当前对象属性
        proxyFactory.copyFrom(this);
        // proxy-target-class属性：用来设置JDK动态代理和CGLIB动态代理之间的切换，默认值为false，JDK代理
        // 使用默认值时，判断目标类preserveTargetClass属性是否为true，是则强制使用Cglib代理目标类；
        // 否则判断目标类是否实现了相关接口，实现了使用JDK代理，否则使用Cglib代理
        if (!proxyFactory.isProxyTargetClass()) {
            // 判断目标类是否设置了preserveTargetClass属性
            if (shouldProxyTargetClass(beanClass, beanName)) {
                proxyFactory.setProxyTargetClass(true);
            } else {
                // 判断目标类是否实现了相关接口，并更新interfaces属性
                evaluateProxyInterfaces(beanClass, proxyFactory);
            }
        }
        // 将Advice封装成Advisor对象
        Advisor[] advisors = buildAdvisors(beanName, specificInterceptors);
        proxyFactory.addAdvisors(advisors);
        proxyFactory.setTargetSource(targetSource);
        // 自定义proxyFactory，由子类实现
        customizeProxyFactory(proxyFactory);
        // 用于设置通知方法是否可以被修改
        proxyFactory.setFrozen(this.freezeProxy);
        if (advisorsPreFiltered()) {
            // 是否已经为特定目标类过滤了Advisor
            proxyFactory.setPreFiltered(true);
        }
        // 创建代理对象
        return proxyFactory.getProxy(getProxyClassLoader());
    }
}
public class ProxyFactory extends ProxyCreatorSupport {
	public Object getProxy(ClassLoader classLoader) {
	    // 创建AopProxy对象，然后调用其getProxy()获取具体的代理对象
		return createAopProxy().getProxy(classLoader);
	}
}
public class DefaultAopProxyFactory implements AopProxyFactory, Serializable {
	public AopProxy createAopProxy(AdvisedSupport config) throws AopConfigException {
	    // Aop代理优化 || ProxyTargetClass属性为true || 只实现了SpringProxy接口或未指定代理接口
		if (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) {
			Class<?> targetClass = config.getTargetClass();
			if (targetClass == null) {
				throw new AopConfigException("TargetSource cannot determine target class: " +
						"Either an interface or a target is required for proxy creation.");
			}
			// 如果目标类是接口 || 目标类是使用Jdk代理生成的类
			if (targetClass.isInterface() || Proxy.isProxyClass(targetClass)) {
				return new JdkDynamicAopProxy(config);
			}
			// DK动态代理
			return new ObjenesisCglibAopProxy(config);
		}
		else {
		    // Cglib动态代理
			return new JdkDynamicAopProxy(config);
		}
	}
}
-------------------------创建aop代理对象之JDK动态代理-------------------------
final class JdkDynamicAopProxy implements AopProxy, InvocationHandler, Serializable {
	public Object getProxy(ClassLoader classLoader) {
		if (logger.isDebugEnabled()) {
			logger.debug("Creating JDK dynamic proxy: target source is " + this.advised.getTargetSource());
		}
		// 获取被代理对象的所有接口
		Class<?>[] proxiedInterfaces = AopProxyUtils.completeProxiedInterfaces(this.advised, true);
		// 判断是否定义equals和hashCode方法
		findDefinedEqualsAndHashCodeMethods(proxiedInterfaces);
		// 创建jdk代理对象，返回
		return Proxy.newProxyInstance(classLoader, proxiedInterfaces, this);
	}
    private void findDefinedEqualsAndHashCodeMethods(Class<?>[] proxiedInterfaces) {
        for (Class<?> proxiedInterface : proxiedInterfaces) {
            Method[] methods = proxiedInterface.getDeclaredMethods();
            for (Method method : methods) {
                // 是否定义equals方法
                if (AopUtils.isEqualsMethod(method)) {
                    this.equalsDefined = true;
                }
                // 是否定义hashCode方法
                if (AopUtils.isHashCodeMethod(method)) {
                    this.hashCodeDefined = true;
                }
                if (this.equalsDefined && this.hashCodeDefined) {
                    return;
                }
            }
        }
    }
}
-------------------------创建aop代理对象之Cglib动态代理-------------------------
class CglibAopProxy implements AopProxy, Serializable {
    public Object getProxy(ClassLoader classLoader) {
		if (logger.isDebugEnabled()) {
			logger.debug("Creating CGLIB proxy: target source is " + this.advised.getTargetSource());
		}

		try {
		    // 获取目标类
			Class<?> rootClass = this.advised.getTargetClass();
			Assert.state(rootClass != null, "Target class must be available for creating a CGLIB proxy");

			Class<?> proxySuperClass = rootClass;
			// 判断目标类是否Cglib代理对象
			if (ClassUtils.isCglibProxyClass(rootClass)) {
			    // 获取父类
				proxySuperClass = rootClass.getSuperclass();
				// 获取父类实现的接口，并将其设置到需要代理的接口中
				Class<?>[] additionalInterfaces = rootClass.getInterfaces();
				for (Class<?> additionalInterface : additionalInterfaces) {
					this.advised.addInterface(additionalInterface);
				}
			}

			// 验证目标类是否static/final或者是跨包访问的，并记录相关日志
			validateClassIfNecessary(proxySuperClass, classLoader);

			// 配置CGLIB增强器Enhancer，并设置类加载器classLoader
			Enhancer enhancer = createEnhancer();
			if (classLoader != null) {
				enhancer.setClassLoader(classLoader);
				if (classLoader instanceof SmartClassLoader &&
						((SmartClassLoader) classLoader).isClassReloadable(proxySuperClass)) {
					enhancer.setUseCache(false);
				}
			}
			// 设置相关属性
			enhancer.setSuperclass(proxySuperClass);
			enhancer.setInterfaces(AopProxyUtils.completeProxiedInterfaces(this.advised));
			enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE);
			enhancer.setStrategy(new ClassLoaderAwareUndeclaredThrowableStrategy(classLoader));
            // 获取所有的回调方法，用于拦截对目标方法的调用
			Callback[] callbacks = getCallbacks(rootClass);
			Class<?>[] types = new Class<?>[callbacks.length];
			for (int x = 0; x < types.length; x++) {
				types[x] = callbacks[x].getClass();
			}
			// CallbackFilter可以实现不同的方法使用不同的回调方法，bean中原方法都会根据设置的filter与一个特定的callback映射
            // CallbackFilter中的accept方法, 根据不同的method返回不同的值, 这个值是在callbacks中的顺序, 就是调用了callbacks[i]
			enhancer.setCallbackFilter(new ProxyCallbackFilter(
					this.advised.getConfigurationOnlyCopy(), this.fixedInterceptorMap, this.fixedInterceptorOffset));
			enhancer.setCallbackTypes(types);

			// 生成代理类并创建代理实例
			return createProxyClassAndInstance(enhancer, callbacks);
		}
		......
	}
	protected Object createProxyClassAndInstance(Enhancer enhancer, Callback[] callbacks) {
		enhancer.setInterceptDuringConstruction(false);
		enhancer.setCallbacks(callbacks);
		// 被代理对象的构造函数是否参数
		return (this.constructorArgs != null ?
				enhancer.create(this.constructorArgTypes, this.constructorArgs) :
				enhancer.create());
	}
	private Callback[] getCallbacks(Class<?> rootClass) throws Exception {
		// 代理对象是否需要曝光
		boolean exposeProxy = this.advised.isExposeProxy();
		// 是否可以修改通知
		boolean isFrozen = this.advised.isFrozen();
		// 代理对象是否是静态的
		boolean isStatic = this.advised.getTargetSource().isStatic();

		// 创建aopInterceptor，保存了方法增强的切面逻辑，用于aop调用
		Callback aopInterceptor = new DynamicAdvisedInterceptor(this.advised);

		Callback targetInterceptor;
		// 当代理对象需要公开时
		if (exposeProxy) {
			targetInterceptor = isStatic ?
			        // 用于没有通知链的静态目标，每次调用使用同一个目标对象
					new StaticUnadvisedExposedInterceptor(this.advised.getTargetSource().getTarget()) :
					// 用于未通知动态目标的拦截器，每次调用生成一个新目标对象
					new DynamicUnadvisedExposedInterceptor(this.advised.getTargetSource());
		}
		else {
			targetInterceptor = isStatic ?
			        // 和上面两个拦截器的区别就在于是否使用AopContext暴露生成的代理对象
					new StaticUnadvisedInterceptor(this.advised.getTargetSource().getTarget()) :
					new DynamicUnadvisedInterceptor(this.advised.getTargetSource());
		}

		Callback targetDispatcher = isStatic ?
				new StaticDispatcher(this.advised.getTargetSource().getTarget()) : new SerializableNoOp();
        // 将各拦截器封装成Callback数组
		Callback[] mainCallbacks = new Callback[] {
				aopInterceptor,  // for normal advice
				targetInterceptor,  // invoke target without considering advice, if optimized
				new SerializableNoOp(),  // no override for methods mapped to this
				targetDispatcher, this.advisedDispatcher,
				new EqualsInterceptor(this.advised),
				new HashCodeInterceptor(this.advised)
		};

		Callback[] callbacks;
		// 目标对象是静态的 && 通知不可修改
		if (isStatic && isFrozen) {
		    // 获取目标对象的所有方法
			Method[] methods = rootClass.getMethods();
			Callback[] fixedCallbacks = new Callback[methods.length];
			this.fixedInterceptorMap = new HashMap<String, Integer>(methods.length);

			for (int x = 0; x < methods.length; x++) {
			    // 获取目标方法的拦截链
				List<Object> chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(methods[x], rootClass);
				// 封装一个拦截器，保存在fixedCallbacks中
				fixedCallbacks[x] = new FixedChainStaticTargetInterceptor(
						chain, this.advised.getTargetSource().getTarget(), this.advised.getTargetClass());
				// 保存方法与fixedCallbacks索引关系，即方法与拦截器的映射关系
				this.fixedInterceptorMap.put(methods[x].toString(), x);
			}
			// 将mainCallbacks和fixedCallbacks中的回调都复制到回调数组callbacks中
			callbacks = new Callback[mainCallbacks.length + fixedCallbacks.length];
			System.arraycopy(mainCallbacks, 0, callbacks, 0, mainCallbacks.length);
			System.arraycopy(fixedCallbacks, 0, callbacks, mainCallbacks.length, fixedCallbacks.length);
			// 用于记录静态拦截器的起始位置，在使用CallbackFilter的时候，可直接获取相应的静态拦截器
			this.fixedInterceptorOffset = mainCallbacks.length;
		}
		else {
			callbacks = mainCallbacks;
		}
		return callbacks;
	}
}
public abstract class AopProxyUtils {
    // 这里AopProxyUtils.completeProxiedInterfaces()方法的主要目的是为要生成的代理类
    // 增加SpringProxy，Advised，DecoratingProxy三个需要实现的接口。这里三个接口的作用如下：
    // 1. SpringProxy：是一个空接口，用于标记当前生成的代理类是Spring生成的代理类；
    // 2. Advised：Spring生成代理类所使用的属性都保存在该接口中，包括Advisor，Advice和其他相关属性；
    // 3. DecoratingProxy：该接口用于获取当前代理对象所代理的目标对象的Class类型。
    static Class<?>[] completeProxiedInterfaces(AdvisedSupport advised, boolean decoratingProxy) {
        // 获取目标类的所有接口
		Class<?>[] specifiedInterfaces = advised.getProxiedInterfaces();
		if (specifiedInterfaces.length == 0) {
			// 未实现接口，则检查目标类是否是接口
			Class<?> targetClass = advised.getTargetClass();
			if (targetClass != null) {
				if (targetClass.isInterface()) {
					advised.setInterfaces(targetClass);
				}
				// 目标类是否是代理生成类
				else if (Proxy.isProxyClass(targetClass)) {
					advised.setInterfaces(targetClass.getInterfaces());
				}
				specifiedInterfaces = advised.getProxiedInterfaces();
			}
		}
		// 是否实现SpringProxy接口
		boolean addSpringProxy = !advised.isInterfaceProxied(SpringProxy.class);
		// 是否可以强制转换 && 是否实现Advised接口
		boolean addAdvised = !advised.isOpaque() && !advised.isInterfaceProxied(Advised.class);
		// 是否公开DecoratingProxy接口 && 是否实现DecoratingProxy接口
		boolean addDecoratingProxy = (decoratingProxy && !advised.isInterfaceProxied(DecoratingProxy.class));
		int nonUserIfcCount = 0;
		if (addSpringProxy) {
			nonUserIfcCount++;
		}
		if (addAdvised) {
			nonUserIfcCount++;
		}
		if (addDecoratingProxy) {
			nonUserIfcCount++;
		}
		Class<?>[] proxiedInterfaces = new Class<?>[specifiedInterfaces.length + nonUserIfcCount];
		System.arraycopy(specifiedInterfaces, 0, proxiedInterfaces, 0, specifiedInterfaces.length);
		int index = specifiedInterfaces.length;
		// 判断是否增加SpringProxy，Advised，DecoratingProxy三个需要实现的接口
		if (addSpringProxy) {
			proxiedInterfaces[index] = SpringProxy.class;
			index++;
		}
		if (addAdvised) {
			proxiedInterfaces[index] = Advised.class;
			index++;
		}
		if (addDecoratingProxy) {
			proxiedInterfaces[index] = DecoratingProxy.class;
		}
		return proxiedInterfaces;
	}
}

