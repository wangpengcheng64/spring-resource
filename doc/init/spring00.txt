Spring容器的refresh()【创建刷新】;
1、prepareRefresh()：刷新前的预处理
	1）、initPropertySources()：初始化一些属性设置;子类自定义个性化的属性设置方法；
	2）、getEnvironment().validateRequiredProperties()：检验属性的合法等
	3）、earlyApplicationEvents= new LinkedHashSet<ApplicationEvent>()：初始化早期事件容器；
2、obtainFreshBeanFactory()：获取BeanFactory
	1）、refreshBeanFactory()：刷新创建BeanFactory，初始化属性，加载bean的定义信息
	2）、getBeanFactory()：返回创建的BeanFactory对象；
3、prepareBeanFactory(beanFactory)：BeanFactory的预准备工作（BeanFactory进行一些设置）
	1）、设置BeanFactory的类加载器、支持表达式解析器...
	2）、添加部分BeanPostProcessor【ApplicationContextAwareProcessor】
	3）、设置自动装配时需要忽略的几个接口EnvironmentAware、EmbeddedValueResolverAware、xxx；
	4）、注册可以解析的自动装配，能直接在任何组件中自动注入：
			BeanFactory、ResourceLoader、ApplicationEventPublisher、ApplicationContext
	5）、添加BeanPostProcessor：ApplicationListenerDetector
	6）、增加对Aspectj的支持；
	7）、给BeanFactory中注册一些能用的组件：Environment/SystemProperties/SystemEnvironment
4、postProcessBeanFactory(beanFactory):BeanFactory准备工作完成后进行的后置处理工作；
	1）、子类通过重写这个方法来在BeanFactory创建并预准备完成以后做进一步的设置
======================以上是BeanFactory的创建及预准备工作==================================
5、invokeBeanFactoryPostProcessors(beanFactory)：执行BeanFactoryPostProcessor的postProcessBeanFactory()方法
	BeanFactoryPostProcessor：BeanFactory的后置处理器，在BeanFactory标准初始化之后执行的；
	两个接口：BeanFactoryPostProcessor、BeanDefinitionRegistryPostProcessor
	1）、执行BeanFactoryPostProcessor的方法；
		先执行BeanDefinitionRegistryPostProcessor
		1）、获取所有的BeanDefinitionRegistryPostProcessor；
		2）、先执行实现了PriorityOrdered优先级接口的BeanDefinitionRegistryPostProcessor；
		3）、再执行实现了Ordered顺序接口的BeanDefinitionRegistryPostProcessor；
		4）、最后执行没有实现任何优先级或者是顺序接口的BeanDefinitionRegistryPostProcessors；
		再执行BeanFactoryPostProcessor的方法
		1）、获取所有的BeanFactoryPostProcessor
		2）、先执行实现了PriorityOrdered优先级接口的BeanFactoryPostProcessor、
		3）、再执行实现了Ordered顺序接口的BeanFactoryPostProcessor；
		4）、最后执行没有实现任何优先级或者是顺序接口的BeanFactoryPostProcessor；
6、registerBeanPostProcessors(beanFactory)：注册BeanPostProcessor的实现类（Bean的后置处理器）
		不同接口类型的BeanPostProcessor；在Bean创建前后的执行时机是不一样的
		BeanPostProcessor、DestructionAwareBeanPostProcessor、InstantiationAwareBeanPostProcessor、
		SmartInstantiationAwareBeanPostProcessor、MergedBeanDefinitionPostProcessor
		1）、获取所有的 BeanPostProcessor
		2）、先注册PriorityOrdered优先级接口的BeanPostProcessor
		3）、再注册Ordered接口的BeanPostProcessor
		4）、最后注册没有实现任何优先级接口的
		5）、最终注册MergedBeanDefinitionPostProcessor
		6）、注册一个ApplicationListenerDetector：在Bean创建完成后检查是否是ApplicationListener
7、initMessageSource():初始化MessageSource组件（做国际化功能；消息绑定，消息解析）；
        MessageSource：取出国际化配置文件中的某个key的值；能按照区域信息获取；
		1）、获取BeanFactory
		2）、如果xml文件中定义了id为messageSource的bean对象，则赋值给messageSource
		3）、没有在配置中定义，则创建默认的DelegatingMessageSource对象
		4）、将DelegatingMessageSource注册到BeanFactory容器中，其他组件需要使用，可以自动注入
8、initApplicationEventMulticaster()：初始化事件派发器；
		1）、获取BeanFactory
		2）、xml文件中是否定义了id为applicationEventMulticaster的bean对象；
		3）、没有在配置中定义，则创建默认的SimpleApplicationEventMulticaster对象
		4）、将ApplicationEventMulticaster注册到BeanFactory容器中，其他组件需要使用，可以自动注入
9、onRefresh()：留给子容器（子类）
		1、留个子类实现自定义逻辑，或者实例化一些特殊的bean
10、registerListeners()：注册事件监听器；
		1、将手动注册的监听器添加到事件派发器中
		2、从容器中获取实现了ApplicationListener接口的Bean，添加到事件派发器中
		3、发布一些早期事件；
11、finishBeanFactoryInitialization(beanFactory)：初始化所有剩下的单实例对象beanFactory.preInstantiateSingletons()
    1）、获取容器中的所有Bean，依次进行初始化和创建对象
    2）、获取Bean的定义信息；RootBeanDefinition
    3）、Bean不是抽象的，单实例的，非懒加载：
        1）、判断是否是FactoryBean，是否是实现FactoryBean接口的Bean
        2）、不是工厂Bean，则利用getBean(beanName)创建对象：
            1、通过beanName获取实例getBean() -> doGetBean()
            2、先获取缓存中保存的单实例Bean（所有创建过的单实例Bean都会被缓存起来）
            3、缓存中获取不到，开始Bean的创建对象流程
            4、标记当前bean已经被创建
            5、获取Bean的定义信息
            6、获取当前Bean依赖的其他Bean，如果有按照getBean()把依赖的Bean先创建出来
            7、启动单实例Bean的创建流程：
                1）、createBean(beanName, mbd, args);
                2）、让BeanPostProcessor先拦截返回代理对象resolveBeforeInstantiation(beanName, mbdToUse)
                    先触发InstantiationAwareBeanPostProcessor的postProcessBeforeInstantiation()方法
                    如果有返回值，继续触发InstantiationAwareBeanPostProcessor的postProcessAfterInitialization()方法
                3）、如果前面的InstantiationAwareBeanPostProcessor没有返回代理对象，则继续执行下面流程
                4）、doCreateBean(beanName, mbdToUse, args);创建Bean
                     1）、利用工厂方法或者对象的构造器创建出Bean实例：createBeanInstance(beanName, mbd, args)
                     2）、执行MergedBeanDefinitionPostProcessor的postProcessMergedBeanDefinition()方法
                     3）、对Bean对实例进行属性填充：populateBean(beanName, mbd, instanceWrapper);
                        赋值之前：
                        1）、执行后置处理器InstantiationAwareBeanPostProcessor的postProcessAfterInstantiation()方法
                        2）、执行后置处理器InstantiationAwareBeanPostProcessor的postProcessPropertyValues()方法
                        3）、将解析的属性值注入到Bean实例中；为属性利用setter方法等进行赋值
                     4）、初始化Bean：initializeBean(beanName, exposedObject, mbd);
                        1）、执行Aware接口方法invokeAwareMethods(beanName, bean)：BeanNameAware\BeanClassLoaderAware\BeanFactoryAware
                        2）、执行所有实现BeanPostProcessor接口对象的postProcessBeforeInitialization()方法，对Bean对象进行加工
                        3）、执行Bean的初始化方法invokeInitMethods(beanName, wrappedBean, mbd)
                            1）、是否是InitializingBean接口的实现；执行接口规定的初始化；
                            2）、是否自定义初始化方法；
                        4）、执行所有实现BeanPostProcessor接口对象的postProcessAfterInitialization()方法，对Bean对象进行加工
                     5）、注册需要执行销毁方法的Bean；
                5）、将创建的Bean对象添加到缓存中singletonObjects；
    4）、遍历所有的bean，触发SmartInitializingSingleton类型bean的afterSingletonsInstantiated()方法
12、finishRefresh();完成BeanFactory的初始化创建工作；IOC容器就创建完成；
		1）、initLifecycleProcessor();初始化和生命周期有关的后置处理器；
		    xml文件中是否定义了id为lifecycleProcessor的bean对象，没有则创建默认的DefaultLifecycleProcessor对象，并加入到容器；
		2）、首先将刷新完成事件传播到生命周期处理器
		3）、发布容器刷新完成事件；

======总结===========
1）、Spring容器在启动的时候，先会保存所有注册进来的Bean的定义信息；
    1）、xml注册bean；<bean>
    2）、注解注册Bean；@Service、@Component、@Bean、xxx
2）、Spring容器会合适的时机创建这些Bean
    1）、用到这个bean的时候；利用getBean创建bean；创建好以后保存在容器中；
    2）、统一创建剩下所有的bean的时候；finishBeanFactoryInitialization()；
3）、后置处理器；BeanPostProcessor
    1）、每一个bean创建完成，都会使用各种后置处理器进行处理；来增强bean的功能；
        AutowiredAnnotationBeanPostProcessor:处理自动注入
        AnnotationAwareAspectJAutoProxyCreator:来做AOP功能；
        xxx....
        增强的功能注解：
        AsyncAnnotationBeanPostProcessor
        ....
4）、事件驱动模型；
    ApplicationListener；事件监听；
    ApplicationEventMulticaster；事件派发：
