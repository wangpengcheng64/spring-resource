Spring容器初始化--创建BeanFactory及加载Bean定义信息(三)
解析自定义标签：Spring的aop，tx这类标签都是有自定义的命名空间的标签
// 下面以component-scan标签进行源码跟踪
public class BeanDefinitionParserDelegate {
	public BeanDefinition parseCustomElement(Element ele, BeanDefinition containingBd) {
	    // 命名空间的 URI
		String namespaceUri = getNamespaceURI(ele);
		// 通过命名空间可以在类路径下的spring.handlers中找到对应的处理器，在spring.schemas中找到对应的xsd文件
		NamespaceHandler handler = this.readerContext.getNamespaceHandlerResolver().resolve(namespaceUri);
		if (handler == null) {
			error("Unable to locate Spring NamespaceHandler for XML schema namespace [" + namespaceUri + "]", ele);
			return null;
		}
		// 通过处理器解析自定义标签
		return handler.parse(ele, new ParserContext(this.readerContext, this, containingBd));
	}
}
public abstract class NamespaceHandlerSupport implements NamespaceHandler {
	public BeanDefinition parse(Element element, ParserContext parserContext) {
		return findParserForElement(element, parserContext).parse(element, parserContext);
	}
	private BeanDefinitionParser findParserForElement(Element element, ParserContext parserContext) {
	    // 获取标签名称
		String localName = parserContext.getDelegate().getLocalName(element);
		// 通过标签名称获取对应的解析器
		BeanDefinitionParser parser = this.parsers.get(localName);
		if (parser == null) {
			parserContext.getReaderContext().fatal(
					"Cannot locate BeanDefinitionParser for element [" + localName + "]", element);
		}
		return parser;
	}
}
public class ContextNamespaceHandler extends NamespaceHandlerSupport {
    // 用来解析spring.xml配置文件中context命名空间下的节点的
	// 初始化，注册不同类型的解析器BeanDefinitionParser
	public void init() {
		registerBeanDefinitionParser("property-placeholder", new PropertyPlaceholderBeanDefinitionParser());
		registerBeanDefinitionParser("property-override", new PropertyOverrideBeanDefinitionParser());
		registerBeanDefinitionParser("annotation-config", new AnnotationConfigBeanDefinitionParser());
		registerBeanDefinitionParser("component-scan", new ComponentScanBeanDefinitionParser());
		registerBeanDefinitionParser("load-time-weaver", new LoadTimeWeaverBeanDefinitionParser());
		registerBeanDefinitionParser("spring-configured", new SpringConfiguredBeanDefinitionParser());
		registerBeanDefinitionParser("mbean-export", new MBeanExportBeanDefinitionParser());
		registerBeanDefinitionParser("mbean-server", new MBeanServerBeanDefinitionParser());
	}

}
public class ComponentScanBeanDefinitionParser implements BeanDefinitionParser {
    // 扫描包路径
    private static final String BASE_PACKAGE_ATTRIBUTE = "base-package";
    // 对资源进行筛选的正则表达式
    private static final String RESOURCE_PATTERN_ATTRIBUTE = "resource-pattern";
    // 是否使用默认的过滤器，默认值true
    private static final String USE_DEFAULT_FILTERS_ATTRIBUTE = "use-default-filters";
    // 是否注册所有用于注解的Bean后置处理器
    private static final String ANNOTATION_CONFIG_ATTRIBUTE = "annotation-config";
    // Bean的ID策略生成器
    private static final String NAME_GENERATOR_ATTRIBUTE = "name-generator";
    // 是否注册ScopeMetadataResolver
    private static final String SCOPE_RESOLVER_ATTRIBUTE = "scope-resolver";
    // 设置作用域的默认代理模式ScopedProxyMode
    private static final String SCOPED_PROXY_ATTRIBUTE = "scoped-proxy";
    // 排除过滤器
    private static final String EXCLUDE_FILTER_ELEMENT = "exclude-filter";
    // 包含过滤器
    private static final String INCLUDE_FILTER_ELEMENT = "include-filter";
    // 过滤器类型
    private static final String FILTER_TYPE_ATTRIBUTE = "type";
    // 过滤规则条件
    private static final String FILTER_EXPRESSION_ATTRIBUTE = "expression";

	public BeanDefinition parse(Element element, ParserContext parserContext) {
	    //获取component-scan标签的base-package的属性值
		String basePackage = element.getAttribute(BASE_PACKAGE_ATTRIBUTE);
		// 用于解析使用配置文件的情况：base-package="{base-package}"
		basePackage = parserContext.getReaderContext().getEnvironment().resolvePlaceholders(basePackage);
		// 根据 ",; \t\n" 符合进行切割
		String[] basePackages = StringUtils.tokenizeToStringArray(basePackage,
				ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);
		// 初始化一个scanner对象，解析了标签中对应的属性和子标签的定义
		ClassPathBeanDefinitionScanner scanner = configureScanner(parserContext, element);
		// 在指定的基本包内执行扫描，返回注册的bean定义列表
		Set<BeanDefinitionHolder> beanDefinitions = scanner.doScan(basePackages);
		// 组件注册（包括注册一些内部的注解后置处理器、触发注册事件）
		registerComponents(parserContext.getReaderContext(), beanDefinitions, element);
		return null;
	}
	protected ClassPathBeanDefinitionScanner configureScanner(ParserContext parserContext, Element element) {
	    // 是否使用默认的过滤器，默认值true
        boolean useDefaultFilters = true;
        if (element.hasAttribute(USE_DEFAULT_FILTERS_ATTRIBUTE)) {
            useDefaultFilters = Boolean.valueOf(element.getAttribute(USE_DEFAULT_FILTERS_ATTRIBUTE));
        }
        // 初始化一个scanner对象，将bean定义注册到scanner中
        ClassPathBeanDefinitionScanner scanner = createScanner(parserContext.getReaderContext(), useDefaultFilters);
        // 设置检测到的bean定义的默认值
        scanner.setBeanDefinitionDefaults(parserContext.getDelegate().getBeanDefinitionDefaults());
        // 设置名称匹配模式以确定自动装配候选项
        scanner.setAutowireCandidatePatterns(parserContext.getDelegate().getAutowireCandidatePatterns());
        // resource-pattern属性：对资源进行筛选的正则表达式，这边是个大的范畴，具体细分在include-filter与exclude-filter中进行
        if (element.hasAttribute(RESOURCE_PATTERN_ATTRIBUTE)) {
            scanner.setResourcePattern(element.getAttribute(RESOURCE_PATTERN_ATTRIBUTE));
        }
        // name-generator属性：注册为Bean的ID生成策略，这个生成器基于接口BeanNameGenerator实现generateBeanName方法，可自定义策略
        try {
            parseBeanNameGenerator(element, scanner);
        }
        catch (Exception ex) {
            parserContext.getReaderContext().error(ex.getMessage(), parserContext.extractSource(element), ex.getCause());
        }
        try {
            // scope-resolver 和 scope-proxy属性，只能同时配置一个
            parseScope(element, scanner);
        }
        catch (Exception ex) {
            parserContext.getReaderContext().error(ex.getMessage(), parserContext.extractSource(element), ex.getCause());
        }
        // 用来告知哪些类是否需要注册成Spring Bean,使用type和expression属性一起协作来定义组件扫描策略
        // annotation：过滤器扫描使用注解所标注的那些类，通过expression属性指定要扫描的注释
        // assignable：过滤器扫描派生于expression属性所指定类型的那些类
        // aspectj：过滤器扫描与expression属性所指定的AspectJ表达式所匹配的那些类
        // custom：使用自定义的org.springframework.core.type.TypeFliter实现类，该类由expression属性指定
        // regex：过滤器扫描类的名称与expression属性所指定正则表示式所匹配的那些类
        parseTypeFilters(element, scanner, parserContext);
        return scanner;
    }
    protected void registerComponents(
			XmlReaderContext readerContext, Set<BeanDefinitionHolder> beanDefinitions, Element element) {
		Object source = readerContext.extractSource(element);
		// 使用注解的tagName（例如: context:component-scan）和source对象构建CompositeComponentDefinition
		CompositeComponentDefinition compositeDef = new CompositeComponentDefinition(element.getTagName(), source);
        // 将扫描到的所有BeanDefinition添加到compositeDef的nestedComponents属性中
		for (BeanDefinitionHolder beanDefHolder : beanDefinitions) {
			compositeDef.addNestedComponent(new BeanComponentDefinition(beanDefHolder));
		}
        // //获取annotation-config的属性值，默认为true
		boolean annotationConfig = true;
		if (element.hasAttribute(ANNOTATION_CONFIG_ATTRIBUTE)) {
			annotationConfig = Boolean.valueOf(element.getAttribute(ANNOTATION_CONFIG_ATTRIBUTE));
		}
		// 如果annotation-config属性值为true
		if (annotationConfig) {
		    // 在给定的注册表中注册所有用于注解的Bean后置处理器
			Set<BeanDefinitionHolder> processorDefinitions =
					AnnotationConfigUtils.registerAnnotationConfigProcessors(readerContext.getRegistry(), source);
			for (BeanDefinitionHolder processorDefinition : processorDefinitions) {
			    // 将注册的注解后置处理器的BeanDefinition添加到compositeDef的nestedComponents属性中
				compositeDef.addNestedComponent(new BeanComponentDefinition(processorDefinition));
			}
		}
        // 触发组件注册的事件
		readerContext.fireComponentRegistered(compositeDef);
	}
}
public class ClassPathBeanDefinitionScanner extends ClassPathScanningCandidateComponentProvider {
    protected Set<BeanDefinitionHolder> doScan(String... basePackages) {
		Assert.notEmpty(basePackages, "At least one base package must be specified");
		Set<BeanDefinitionHolder> beanDefinitions = new LinkedHashSet<BeanDefinitionHolder>();
		// 遍历需要扫描的包列表
		for (String basePackage : basePackages) {
		    // 找出所有的被component注解标注的类，将解析成beanDefinition
			Set<BeanDefinition> candidates = findCandidateComponents(basePackage);
			for (BeanDefinition candidate : candidates) {
				ScopeMetadata scopeMetadata = this.scopeMetadataResolver.resolveScopeMetadata(candidate);
				// //设置beanDefinition的scope属性，默认是singleton
				candidate.setScope(scopeMetadata.getScopeName());
				// 根据Bean的ID策略生成器生成beanName
				String beanName = this.beanNameGenerator.generateBeanName(candidate, this.registry);
				if (candidate instanceof AbstractBeanDefinition) {
                    //设置bean定义的默认属性，如lazyInit，autowiredMode等
                    postProcessBeanDefinition((AbstractBeanDefinition) candidate, beanName);
                }
                if (candidate instanceof AnnotatedBeanDefinition) {
                    //设置bean定义的其他属性，如lazy,primary,depend-on等
                    AnnotationConfigUtils.processCommonDefinitionAnnotations((AnnotatedBeanDefinition) candidate);
                }
                //判断是否已经被注册过
                if (checkCandidate(beanName, candidate)) {
                    //没有注册则将beanDefinition包装成definitionHolder
                    BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(candidate, beanName);
                    definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry);
                    beanDefinitions.add(definitionHolder);
                    // 注册BeanDefinition（注册到beanDefinitionMap、beanDefinitionNames、aliasMap缓存）
                    registerBeanDefinition(definitionHolder, this.registry);
                }
			}
		}
		return beanDefinitions;
	}
    public Set<BeanDefinition> findCandidateComponents(String basePackage) {
        Set<BeanDefinition> candidates = new LinkedHashSet<BeanDefinition>();
		try {
		    // 包路径组装：classpath*:com/wpc/service/**/*.class
			String packageSearchPath = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +
					resolveBasePackage(basePackage) + '/' + this.resourcePattern;
			// 解析包路径下所有的.class文件，封装成Resource对象
			Resource[] resources = this.resourcePatternResolver.getResources(packageSearchPath);
			boolean traceEnabled = logger.isTraceEnabled();
			boolean debugEnabled = logger.isDebugEnabled();
			// 遍历所有解析的resource
			for (Resource resource : resources) {
				if (resource.isReadable()) {
					try {
					    // 将resource封装成MetadataReader对象
						MetadataReader metadataReader = this.metadataReaderFactory.getMetadataReader(resource);
						// 判断是否有@Component注解
						if (isCandidateComponent(metadataReader)) {
							ScannedGenericBeanDefinition sbd = new ScannedGenericBeanDefinition(metadataReader);
							sbd.setResource(resource);
							sbd.setSource(resource);
							// 判断类是否可以实例化
							if (isCandidateComponent(sbd)) {
								candidates.add(sbd);
							}
						}
					}
					......
				}
			}
		}
		catch (IOException ex) {
			throw new BeanDefinitionStoreException("I/O failure during classpath scanning", ex);
		}
		return candidates;
	}
}
public class ClassPathScanningCandidateComponentProvider implements EnvironmentCapable, ResourceLoaderAware {
    protected boolean isCandidateComponent(MetadataReader metadataReader) throws IOException {
        // 遍历所有的过滤规则
        for (TypeFilter tf : this.excludeFilters) {
            if (tf.match(metadataReader, this.metadataReaderFactory)) {
                return false;
            }
        }
        // 遍历所有的包含规则，判断是否有@Component注解(衍生注解：@Service(服务)，@Controller(控制器)，@Repository(数据仓库))
        for (TypeFilter tf : this.includeFilters) {
            if (tf.match(metadataReader, this.metadataReaderFactory)) {
                return isConditionMatch(metadataReader);
            }
        }
        return false;
    }
    protected boolean isCandidateComponent(AnnotatedBeanDefinition beanDefinition) {
        AnnotationMetadata metadata = beanDefinition.getMetadata();
        // 不是内部类或者是静态内部类 && (不是接口或抽象类 || (抽象类 && 有@lookUp注解标注))
        return (metadata.isIndependent() && (metadata.isConcrete() ||
                (metadata.isAbstract() && metadata.hasAnnotatedMethods(Lookup.class.getName()))));
    }
}


