Spring容器初始化--Bean的实例化过程(三)之createBean方法
public abstract class AbstractAutowireCapableBeanFactory extends AbstractBeanFactory
		implements AutowireCapableBeanFactory {
	protected Object createBean(String beanName, RootBeanDefinition mbd, Object[] args) throws BeanCreationException {
        if (logger.isDebugEnabled()) {
            logger.debug("Creating instance of bean '" + beanName + "'");
        }
        RootBeanDefinition mbdToUse = mbd;

        // 确保此时bean类已经被解析
        Class<?> resolvedClass = resolveBeanClass(mbd, beanName);
        if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {
            mbdToUse = new RootBeanDefinition(mbd);
            mbdToUse.setBeanClass(resolvedClass);
        }
        try {
            // 准备方法覆盖
            mbdToUse.prepareMethodOverrides();
        }
        catch (BeanDefinitionValidationException ex) {
            throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(),
                    beanName, "Validation of method overrides failed", ex);
        }
        try {
            // 给beanPostProcessor一个机会来返回代理而不是目标bean实例
            Object bean = resolveBeforeInstantiation(beanName, mbdToUse);
            if (bean != null) {
                return bean;
            }
        }
        catch (Throwable ex) {
            throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName,
                    "BeanPostProcessor before instantiation of bean failed", ex);
        }
        // 执行doCreateBean()方法获取实例对象
        Object beanInstance = doCreateBean(beanName, mbdToUse, args);
        if (logger.isDebugEnabled()) {
            logger.debug("Finished creating instance of bean '" + beanName + "'");
        }
        return beanInstance;
    }
	protected Object resolveBeforeInstantiation(String beanName, RootBeanDefinition mbd) {
		Object bean = null;
		if (!Boolean.FALSE.equals(mbd.beforeInstantiationResolved)) {
			// bean定义信息不是合成的 && 容器中已经注册了InstantiationAwareBeanPostProcessors实例(比如MyInstantiationAwareBeanPostProcessor)
			if (!mbd.isSynthetic() && hasInstantiationAwareBeanPostProcessors()) {
			    // 获取Class类型
				Class<?> targetType = determineTargetType(beanName, mbd);
				if (targetType != null) {
				    // 执行所有实现了InstantiationAwareBeanPostProcessors接口的类的postProcessBeforeInstantiation()方法
					bean = applyBeanPostProcessorsBeforeInstantiation(targetType, beanName);
					if (bean != null) {
					    // 执行所有实现了InstantiationAwareBeanPostProcessors接口的类的postProcessAfterInitialization()方法
						bean = applyBeanPostProcessorsAfterInitialization(bean, beanName);
					}
				}
			}
			// 标识该bean定义在实例化已经被解析了
			mbd.beforeInstantiationResolved = (bean != null);
		}
		return bean;
	}
    protected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final Object[] args)
			throws BeanCreationException {
		// 新建Bean的包装类对象
		BeanWrapper instanceWrapper = null;
		if (mbd.isSingleton()) {
		    // 从未完成的FactoryBean实例的缓存中获取
			instanceWrapper = this.factoryBeanInstanceCache.remove(beanName);
		}
		if (instanceWrapper == null) {
		    // 初始化Bean的包装类实例
			instanceWrapper = createBeanInstance(beanName, mbd, args);
		}
		// instanceWrapper不为空，则获取Bean对象及其类型
		final Object bean = (instanceWrapper != null ? instanceWrapper.getWrappedInstance() : null);
		Class<?> beanType = (instanceWrapper != null ? instanceWrapper.getWrappedClass() : null);
		mbd.resolvedTargetType = beanType;

		// 允许Bean后置处理器(实现了MergedBeanDefinitionPostProcessor接口)修改合并的bean定义
		// 自定义实现类：MyMergedBeanDefinitionPostProcessor
		synchronized (mbd.postProcessingLock) {
			if (!mbd.postProcessed) {
				try {
					applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);
				}
				catch (Throwable ex) {
					throw new BeanCreationException(mbd.getResourceDescription(), beanName,
							"Post-processing of merged bean definition failed", ex);
				}
				mbd.postProcessed = true;
			}
		}
		// 判断实例是否需要提前曝光 = 单例 && 允许循环引用 && 当前bean正在创建中
		boolean earlySingletonExposure = (mbd.isSingleton() && this.allowCircularReferences &&
				isSingletonCurrentlyInCreation(beanName));
		if (earlySingletonExposure) {
			if (logger.isDebugEnabled()) {
				logger.debug("Eagerly caching bean '" + beanName +
						"' to allow for resolving potential circular references");
			}
			// 提前曝光Bean对应的ObjectFactory，用于解析循环引用
			addSingletonFactory(beanName, new ObjectFactory<Object>() {
				@Override
				public Object getObject() throws BeansException {
				    // 执行SmartInstantiationAwareBeanPostProcessor实现类的getEarlyBeanReference()方法获取bean的早期引用
				    // 自定义实现类：MySmartInstantiationAwareBeanPostProcessor
					return getEarlyBeanReference(beanName, mbd, bean);
				}
			});
		}
		Object exposedObject = bean;
		try {
		    // 对Bean对实例进行属性填充
			populateBean(beanName, mbd, instanceWrapper);
			if (exposedObject != null) {
			    // 初始化Bean，Aware注入
				exposedObject = initializeBean(beanName, exposedObject, mbd);
			}
		}
		catch (Throwable ex) {
			if (ex instanceof BeanCreationException && beanName.equals(((BeanCreationException) ex).getBeanName())) {
				throw (BeanCreationException) ex;
			}
			else {
				throw new BeanCreationException(
						mbd.getResourceDescription(), beanName, "Initialization of bean failed", ex);
			}
		}
        // 如果Bean实例需要提前曝光
		if (earlySingletonExposure) {
		    // 获取Bean的早期引用，getSingleton()方法在spring05.txt有介绍
			Object earlySingletonReference = getSingleton(beanName, false);
			if (earlySingletonReference != null) {
			    // exposedObject进行初始化方法initializeBean()后没有增强，则使用Bean的早期引用
				if (exposedObject == bean) {
					exposedObject = earlySingletonReference;
				}
				// exposedObject进行初始化方法initializeBean()后增强了 &&
				// 不允许在循环引用的情况下注入一个原始的bean实例 && beanName被其他Bean依赖
				else if (!this.allowRawInjectionDespiteWrapping && hasDependentBean(beanName)) {
				    // 通过beanName获取其被依赖集合
					String[] dependentBeans = getDependentBeans(beanName);
					Set<String> actualDependentBeans = new LinkedHashSet<String>(dependentBeans.length);
					// 循环遍历依赖集合，尝试将这些Bean实例进行移除，因为其依赖已经增强了，需重新初始化
					for (String dependentBean : dependentBeans) {
						if (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) {
							actualDependentBeans.add(dependentBean);
						}
					}
					// 如果存在移除失败的则抛异常，因为有Bean实例依赖了脏数据(其依赖进行增强了)
					if (!actualDependentBeans.isEmpty()) {
						throw new BeanCurrentlyInCreationException(beanName,
								"Bean with name '" + beanName + "' has been injected into other beans [" +
								StringUtils.collectionToCommaDelimitedString(actualDependentBeans) +
								"] in its raw version as part of a circular reference, but has eventually been " +
								"wrapped. This means that said other beans do not use the final version of the " +
								"bean. This is often the result of over-eager type matching - consider using " +
								"'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example.");
					}
				}
			}
		}

		try {
		    // 注册需要执行销毁方法的Bean，容器销毁的时候，会遍历disposableBeans，逐一执行销毁方法。
            // (1)Bean是DisposableBean的实现类，此时执行DisposableBean的接口方法destroy()
            // (2)Bean标签中有配置destroy-method属性，此时执行destroy-method配置指定的方法
            // (3)当前Bean对应的BeanFactory中持有DestructionAwareBeanPostProcessor接口的实现类，此时执行postProcessBeforeDestruction方法
			registerDisposableBeanIfNecessary(beanName, bean, mbd);
		}
		catch (BeanDefinitionValidationException ex) {
			throw new BeanCreationException(
					mbd.getResourceDescription(), beanName, "Invalid destruction signature", ex);
		}
		return exposedObject;
	}
    protected void applyMergedBeanDefinitionPostProcessors(RootBeanDefinition mbd, Class<?> beanType, String beanName) {
        // 遍历所有的Bean后置处理器，如果属于MergedBeanDefinitionPostProcessor类型，则执行其postProcessMergedBeanDefinition()方法
        for (BeanPostProcessor bp : getBeanPostProcessors()) {
            if (bp instanceof MergedBeanDefinitionPostProcessor) {
                MergedBeanDefinitionPostProcessor bdp = (MergedBeanDefinitionPostProcessor) bp;
                // 作用于修改合并的bean定义(MyMergedBeanDefinitionPostProcessor)
                bdp.postProcessMergedBeanDefinition(mbd, beanType, beanName);
            }
        }
    }
    protected Object initializeBean(final String beanName, final Object bean, RootBeanDefinition mbd) {
        if (System.getSecurityManager() != null) {
            AccessController.doPrivileged(new PrivilegedAction<Object>() {
                @Override
                public Object run() {
                    invokeAwareMethods(beanName, bean);
                    return null;
                }
            }, getAccessControlContext());
        }
        else {
            // 判断Bean是否实现Aware接口，并执行其实现方法
            invokeAwareMethods(beanName, bean);
        }
        Object wrappedBean = bean;
        if (mbd == null || !mbd.isSynthetic()) {
            // 执行所有实现BeanPostProcessor接口对象的postProcessBeforeInitialization()方法，对Bean对象进行加工
            // 在spring03.txt中BeanFactory的预准备工作，有介绍BeanFactory有注入ApplicationContextAwareProcessor对象
            // 执行ApplicationContextAwareProcessor的方法：postProcessBeforeInitialization()-->invokeAwareInterfaces()，设置Bean对应的属性值
            // 执行InitDestroyAnnotationBeanPostProcessor的方法：postProcessBeforeInitialization()，执行@PostConstruct注解
            wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);
        }
        try {
            // 执行Bean的初始化方法，见自定义类MyInitializingBean
            invokeInitMethods(beanName, wrappedBean, mbd);
        }
        catch (Throwable ex) {
            throw new BeanCreationException(
                    (mbd != null ? mbd.getResourceDescription() : null),
                    beanName, "Invocation of init method failed", ex);
        }
        if (mbd == null || !mbd.isSynthetic()) {
            // 执行所有实现BeanPostProcessor接口对象的postProcessAfterInitialization()方法，对Bean对象进行加工
            wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);
        }
        return wrappedBean;
    }
    private void invokeAwareMethods(final String beanName, final Object bean) {
        if (bean instanceof Aware) {
            // 实现了BeanNameAware接口，则注入BeanName，自定义Aware实现类MyAware
            if (bean instanceof BeanNameAware) {
                ((BeanNameAware) bean).setBeanName(beanName);
            }
            // 实现了BeanNameAware接口，则注入BeanClassLoader
            if (bean instanceof BeanClassLoaderAware) {
                ((BeanClassLoaderAware) bean).setBeanClassLoader(getBeanClassLoader());
            }
            // 实现了BeanNameAware接口，则注入BeanFactory
            if (bean instanceof BeanFactoryAware) {
                ((BeanFactoryAware) bean).setBeanFactory(AbstractAutowireCapableBeanFactory.this);
            }
        }
    }
    protected void invokeInitMethods(String beanName, final Object bean, RootBeanDefinition mbd)
            throws Throwable {
        // 判断Bean是否实现了InitializingBean接口
        boolean isInitializingBean = (bean instanceof InitializingBean);
        if (isInitializingBean && (mbd == null || !mbd.isExternallyManagedInitMethod("afterPropertiesSet"))) {
            if (logger.isDebugEnabled()) {
                logger.debug("Invoking afterPropertiesSet() on bean with name '" + beanName + "'");
            }
            if (System.getSecurityManager() != null) {
                try {
                    AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {
                        @Override
                        public Object run() throws Exception {
                            ((InitializingBean) bean).afterPropertiesSet();
                            return null;
                        }
                    }, getAccessControlContext());
                }
                catch (PrivilegedActionException pae) {
                    throw pae.getException();
                }
            }
            else {
                // 执行Bean实现的afterPropertiesSet()方法
                ((InitializingBean) bean).afterPropertiesSet();
            }
        }
        if (mbd != null) {
            String initMethodName = mbd.getInitMethodName();
            // 执行Bean的初始化方法init-method
            if (initMethodName != null && !(isInitializingBean && "afterPropertiesSet".equals(initMethodName)) &&
                    !mbd.isExternallyManagedInitMethod(initMethodName)) {
                invokeCustomInitMethod(beanName, bean, mbd);
            }
        }
    }
}
