SpringMVC源码解析--初始化SpringMVC子容器
public abstract class HttpServletBean extends HttpServlet implements EnvironmentCapable, EnvironmentAware {
    @Override
	public final void init() throws ServletException {
		if (logger.isDebugEnabled()) {
			logger.debug("Initializing servlet '" + getServletName() + "'");
		}
		// 对web.xml文件中的DispatcherServlet节点参数进行解析处理
		PropertyValues pvs = new ServletConfigPropertyValues(getServletConfig(), this.requiredProperties);
		if (!pvs.isEmpty()) {
			try {
			    // 将HttpServletBean类型转换为BeanWrapper类型，从而能对init-parameter的值进行注入
				BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(this);
                // 注册自定义属性编辑器，遇到Resource类型的属性将会使用ResourceEditor进行解析
				ResourceLoader resourceLoader = new ServletContextResourceLoader(getServletContext());
				bw.registerCustomEditor(Resource.class, new ResourceEditor(resourceLoader, getEnvironment()));
				// 留给子类实现
				initBeanWrapper(bw);
				// 设置DispatcherServlet的属性
				bw.setPropertyValues(pvs, true);
			}
			catch (BeansException ex) {
				if (logger.isErrorEnabled()) {
					logger.error("Failed to set bean properties on servlet '" + getServletName() + "'", ex);
				}
				throw ex;
			}
		}
		// 初始化工作，由子类FrameworkServlet实现
		initServletBean();
		if (logger.isDebugEnabled()) {
			logger.debug("Servlet '" + getServletName() + "' configured successfully");
		}
	}
}
public abstract class FrameworkServlet extends HttpServletBean implements ApplicationContextAware {
    @Override
	protected final void initServletBean() throws ServletException {
		getServletContext().log("Initializing Spring FrameworkServlet '" + getServletName() + "'");
		if (this.logger.isInfoEnabled()) {
			this.logger.info("FrameworkServlet '" + getServletName() + "': initialization started");
		}
		long startTime = System.currentTimeMillis();
		try {
		    // 初始化SpringMVC容器
			this.webApplicationContext = initWebApplicationContext();
			// 留给子类实现
			initFrameworkServlet();
		}
		......
	}
	protected WebApplicationContext initWebApplicationContext() {
	    // 获取Spring根容器（Spring核心监听器ContextLoaderListener加载时初始化）
        WebApplicationContext rootContext =
                WebApplicationContextUtils.getWebApplicationContext(getServletContext());
        WebApplicationContext wac = null;
        // 判断在构造时是否注入了一个容器实例
        if (this.webApplicationContext != null) {
            wac = this.webApplicationContext;
            if (wac instanceof ConfigurableWebApplicationContext) {
                ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) wac;
                // 是否处于活动状态
                if (!cwac.isActive()) {
                    if (cwac.getParent() == null) {
                        // 将Spring根容器设置为父容器
                        cwac.setParent(rootContext);
                    }
                    // 配置并刷新WebApplicationContext容器
                    configureAndRefreshWebApplicationContext(cwac);
                }
            }
        }
        if (wac == null) {
            // 通过配置名称到ServletContext中查找
            wac = findWebApplicationContext();
        }
        if (wac == null) {
            // 创建一个WebApplicationContext容器
            wac = createWebApplicationContext(rootContext);
        }
        // 判断是否已调用DispatcherServlet的onRefresh()方法
        if (!this.refreshEventReceived) {
            onRefresh(wac);
        }
        // 将WebApplicationContext容器设置到ServletContext属性中
        // ServletContext对象：全局唯一，而且项目内部的所有servlet都共享这个对象
        if (this.publishContext) {
            String attrName = getServletContextAttributeName();
            getServletContext().setAttribute(attrName, wac);
            if (this.logger.isDebugEnabled()) {
                this.logger.debug("Published WebApplicationContext of servlet '" + getServletName() +
                        "' as ServletContext attribute with name [" + attrName + "]");
            }
        }
        return wac;
    }
    protected WebApplicationContext createWebApplicationContext(ApplicationContext parent) {
        // 获取容器class对象（org.springframework.web.context.support.XmlWebApplicationContext）
		Class<?> contextClass = getContextClass();
		if (this.logger.isDebugEnabled()) {
			this.logger.debug("Servlet with name '" + getServletName() +
					"' will try to create custom WebApplicationContext context of class '" +
					contextClass.getName() + "'" + ", using parent context [" + parent + "]");
		}
		if (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) {
			throw new ApplicationContextException(
					"Fatal initialization error in servlet with name '" + getServletName() +
					"': custom WebApplicationContext class [" + contextClass.getName() +
					"] is not of type ConfigurableWebApplicationContext");
		}
		// 利用反射创建XmlWebApplicationContext对象
		ConfigurableWebApplicationContext wac =
				(ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);
        // 初始化容器上下文环境
		wac.setEnvironment(getEnvironment());
		// 设置父容器（Spring根容器）
		wac.setParent(parent);
		// 设置配置文件(classpath:/spring/spring-web.xml)地址
		wac.setConfigLocation(getContextConfigLocation());
        // 容器初始化，解析SpringMVC的配置文件
		configureAndRefreshWebApplicationContext(wac);

		return wac;
	}
	protected void configureAndRefreshWebApplicationContext(ConfigurableWebApplicationContext wac) {
		if (ObjectUtils.identityToString(wac).equals(wac.getId())) {
			// 给WebApplicationContext容器设置id
			if (this.contextId != null) {
				wac.setId(this.contextId);
			}
			else {
				// 生成默认的（org.springframework.web.context.WebApplicationContext:/SpringMVC）
				wac.setId(ConfigurableWebApplicationContext.APPLICATION_CONTEXT_ID_PREFIX +
						ObjectUtils.getDisplayString(getServletContext().getContextPath()) + '/' + getServletName());
			}
		}
        // 设置全局上下文ServletContext对象
		wac.setServletContext(getServletContext());
		wac.setServletConfig(getServletConfig());
		// 设置名称空间，默认为<servlet-name>标签值+"-servlet"，即"SpringMVC-servlet"
		wac.setNamespace(getNamespace());
		wac.addApplicationListener(new SourceFilteringListener(wac, new ContextRefreshListener()));

		// 初始化属性配置，确保servlet属性源在refresh()方法执行之前的任何后处理或初始化中都已就绪
		ConfigurableEnvironment env = wac.getEnvironment();
		if (env instanceof ConfigurableWebEnvironment) {
			((ConfigurableWebEnvironment) env).initPropertySources(getServletContext(), getServletConfig());
		}
        // WebApplicationContext容器后置处理，由子类实现，可以对容器进行修改
		postProcessWebApplicationContext(wac);
		applyInitializers(wac);
		// 接下来就是容器初始化工作，具体查看Spring容器初始化系列
		wac.refresh();
	}
}
// DispatcherServlet是对Servlet类的包装，通过url映射获取SpringMvc中定义得请求方法
// 其实在完成BeanFactory的初始化创建工作(IOC容器创建完成)，发布事件时会执行DispatcherServlet的onRefresh()方法
public class DispatcherServlet extends FrameworkServlet {
	@Override
	protected void onRefresh(ApplicationContext context) {
	    // 初始化这个servlet使用的策略对象
		initStrategies(context);
	}
    static {
        try {
            // DispatcherServlet.properties：定义了DispatcherServlet的默认策略名称
            // 该文件位于包org.springframework.web.servlet,和DispatcherServlet同级目录
            ClassPathResource resource = new ClassPathResource(DEFAULT_STRATEGIES_PATH, DispatcherServlet.class);
            defaultStrategies = PropertiesLoaderUtils.loadProperties(resource);
        }
        catch (IOException ex) {
            throw new IllegalStateException("Could not load '" + DEFAULT_STRATEGIES_PATH + "': " + ex.getMessage());
        }
    }
DispatcherServlet.properties：---------------------------------------------------------------------------------
    # Default implementation classes for DispatcherServlet's strategy interfaces.
    # Used as fallback when no matching beans are found in the DispatcherServlet context.
    # Not meant to be customized by application developers.

    org.springframework.web.servlet.LocaleResolver=org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver

    org.springframework.web.servlet.ThemeResolver=org.springframework.web.servlet.theme.FixedThemeResolver

    org.springframework.web.servlet.HandlerMapping=org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,\
    	org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping

    org.springframework.web.servlet.HandlerAdapter=org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,\
    	org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,\
    	org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter

    org.springframework.web.servlet.HandlerExceptionResolver=org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver,\
    	org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver,\
    	org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver

    org.springframework.web.servlet.RequestToViewNameTranslator=org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator

    org.springframework.web.servlet.ViewResolver=org.springframework.web.servlet.view.InternalResourceViewResolver

    org.springframework.web.servlet.FlashMapManager=org.springframework.web.servlet.support.SessionFlashMapManager
--------------------------------------------------------------------------------------------------------------

	protected void initStrategies(ApplicationContext context) {
        initMultipartResolver(context); // 初始化上传文件解析器

        initLocaleResolver(context); // 初始化本地化解析器

        initThemeResolver(context); // 初始化主题解析器

        initHandlerMappings(context); // 初始化处理器映射器

        initHandlerAdapters(context); // 初始化处理器适配器

        initHandlerExceptionResolvers(context); // 初始化处理器异常解析器

        initRequestToViewNameTranslator(context); // 初始化请求到视图名翻译器

        initViewResolvers(context); // 初始化视图解析器

        initFlashMapManager(context); // 初始化重定向数据管理器
    }
	private void initHandlerMappings(ApplicationContext context) {
		this.handlerMappings = null;

		if (this.detectAllHandlerMappings) {
			// 从容器或父容器ApplicationContext中的获取所有处理程序映射
			Map<String, HandlerMapping> matchingBeans =
					BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerMapping.class, true, false);
			if (!matchingBeans.isEmpty()) {
				this.handlerMappings = new ArrayList<HandlerMapping>(matchingBeans.values());
				// 保持处理器映射是有序的
				AnnotationAwareOrderComparator.sort(this.handlerMappings);
			}
		}
		else {
			try {
			    // 创建Bean名称为handlerMapping的HandlerMapping对象
				HandlerMapping hm = context.getBean(HANDLER_MAPPING_BEAN_NAME, HandlerMapping.class);
				this.handlerMappings = Collections.singletonList(hm);
			}
			catch (NoSuchBeanDefinitionException ex) {
				// Ignore, we'll add a default HandlerMapping later.
			}
		}

		// 从容器获取HandlerMapping失败，则注册默认处理映射
		if (this.handlerMappings == null) {
			this.handlerMappings = getDefaultStrategies(context, HandlerMapping.class);
			if (logger.isDebugEnabled()) {
				logger.debug("No HandlerMappings found in servlet '" + getServletName() + "': using default");
			}
		}
	}
    protected <T> List<T> getDefaultStrategies(ApplicationContext context, Class<T> strategyInterface) {
        // 获取指定策略接口名称
		String key = strategyInterface.getName();
		// 获取指定策略接口的默认实现类名称
		String value = defaultStrategies.getProperty(key);
		if (value != null) {
		    // 逗号分隔成数组
			String[] classNames = StringUtils.commaDelimitedListToStringArray(value);
			List<T> strategies = new ArrayList<T>(classNames.length);
			for (String className : classNames) {
				try {
				    // 获取策略接口实现类Class对象
					Class<?> clazz = ClassUtils.forName(className, DispatcherServlet.class.getClassLoader());
					// 创建策略接口实现类的实例对象
					Object strategy = createDefaultStrategy(context, clazz);
					strategies.add((T) strategy);
				}
				...
			}
			return strategies;
		}
		else {
			return new LinkedList<T>();
		}
	}
}
