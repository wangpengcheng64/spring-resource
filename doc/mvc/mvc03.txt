SpringMVC源码解析--建立url与controller映射关系
查看《Spring容器初始化--创建BeanFactory及加载Bean定义信息(三)》可以了解到<aop>标签解析过程
首先通过命名空间可以在类路径下的spring.handlers中找到对应的处理器，在spring.schemas中找到对应的xsd文件
获取到注解对应的处理器：http\://www.springframework.org/schema/mvc=org.springframework.web.servlet.config.MvcNamespaceHandler
public class MvcNamespaceHandler extends NamespaceHandlerSupport {
    // 注册对应的解析器
	@Override
	public void init() {
		//解析<mvc:annotation-driven>标签
        registerBeanDefinitionParser("annotation-driven", new AnnotationDrivenBeanDefinitionParser());
        //解析<mvc:default-servlet-handler>标签
        registerBeanDefinitionParser("default-servlet-handler", new DefaultServletHandlerBeanDefinitionParser());
        //解析<mvc:interceptors>标签
		registerBeanDefinitionParser("interceptors", new InterceptorsBeanDefinitionParser());
		registerBeanDefinitionParser("resources", new ResourcesBeanDefinitionParser());
		registerBeanDefinitionParser("view-controller", new ViewControllerBeanDefinitionParser());
		registerBeanDefinitionParser("redirect-view-controller", new ViewControllerBeanDefinitionParser());
		registerBeanDefinitionParser("status-controller", new ViewControllerBeanDefinitionParser());
		registerBeanDefinitionParser("view-resolvers", new ViewResolversBeanDefinitionParser());
		registerBeanDefinitionParser("tiles-configurer", new TilesConfigurerBeanDefinitionParser());
		registerBeanDefinitionParser("freemarker-configurer", new FreeMarkerConfigurerBeanDefinitionParser());
		registerBeanDefinitionParser("velocity-configurer", new VelocityConfigurerBeanDefinitionParser());
		registerBeanDefinitionParser("groovy-configurer", new GroovyMarkupConfigurerBeanDefinitionParser());
		registerBeanDefinitionParser("script-template-configurer", new ScriptTemplateConfigurerBeanDefinitionParser());
		registerBeanDefinitionParser("cors", new CorsBeanDefinitionParser());
	}
}
<mvc:annotation-driven/>标签对应的解析器是：AnnotationDrivenBeanDefinitionParser，并且执行其parse()方法，会向IOC容器中注册多个对象。
class AnnotationDrivenBeanDefinitionParser implements BeanDefinitionParser {
	public BeanDefinition parse(Element element, ParserContext parserContext) {
	    ...
	    // RequestMappingHandlerMapping
	    parserContext.registerComponent(new BeanComponentDefinition(handlerMappingDef, HANDLER_MAPPING_BEAN_NAME));
	    // RequestMappingHandlerAdapter
        parserContext.registerComponent(new BeanComponentDefinition(handlerAdapterDef, HANDLER_ADAPTER_BEAN_NAME));
        // 注册转换服务拦截器CompositeUriComponentsContributor
        parserContext.registerComponent(new BeanComponentDefinition(uriCompContribDef, uriCompContribName));
        // 注册异常请求解析器ExceptionHandlerExceptionResolver
        parserContext.registerComponent(new BeanComponentDefinition(exceptionHandlerExceptionResolver, methodExceptionResolverName));
        // 注册响应状态码异常解析器ResponseStatusExceptionResolver
        parserContext.registerComponent(new BeanComponentDefinition(responseStatusExceptionResolver, responseStatusExceptionResolverName));
        // 注册默认异常处理器DefaultHandlerExceptionResolver
        parserContext.registerComponent(new BeanComponentDefinition(defaultExceptionResolver, defaultExceptionResolverName));
        // 注册转换服务拦截器ConversionServiceExposingInterceptor
        parserContext.registerComponent(new BeanComponentDefinition(mappedCsInterceptorDef, mappedInterceptorName));

        // Ensure BeanNameUrlHandlerMapping (SPR-8289) and default HandlerAdapters are not "turned off"
        MvcNamespaceUtils.registerDefaultComponents(parserContext, source);

        parserContext.popAndRegisterContainingComponent();

        return null;
    }
}
public abstract class MvcNamespaceUtils {
	public static void registerDefaultComponents(ParserContext parserContext, Object source) {
	    // BeanNameUrlHandlerMapping根据bean标签的名字找到相对应的Controller类
		registerBeanNameUrlHandlerMapping(parserContext, source);
		// HttpRequestHandlerAdapter
		registerHttpRequestHandlerAdapter(parserContext, source);
		// SimpleControllerHandlerAdapter根据bean的id查找对应的Controller类
		registerSimpleControllerHandlerAdapter(parserContext, source);
		// HandlerMappingIntrospector
		registerHandlerMappingIntrospector(parserContext, source);
	}
}

SpringMVC3.1 版本之后默认的处理器映射器是RequestMappingHandlerMapping
RequestMappingHandlerMapping对象在IOC实例化bean阶段，会调用该对象afterPropertiesSet()方法做url和bean的映射,
该映射是从IOC中找到标注有@Controller，@RequestMapping注解的bean，然后反射所有的方法Method对象和注解中配置的url值进行映射，
最后在完成BeanFactory的初始化创建工作(IOC容器创建完成)，发布事件时会执行DispatcherServlet的onRefresh()方法
public class RequestMappingHandlerMapping extends RequestMappingInfoHandlerMapping
		implements MatchableHandlerMapping, EmbeddedValueResolverAware {
    public void afterPropertiesSet() {
        // RequestMappingInfo对象用于承装@RequestMapping注解的信息数据
        // BuilderConfiguration用于承装请求映射目标的配置选项
        this.config = new RequestMappingInfo.BuilderConfiguration();
        this.config.setUrlPathHelper(getUrlPathHelper());
        this.config.setPathMatcher(getPathMatcher());
        this.config.setSuffixPatternMatch(this.useSuffixPatternMatch);
        this.config.setTrailingSlashMatch(this.useTrailingSlashMatch);
        this.config.setRegisteredSuffixPatternMatch(this.useRegisteredSuffixPatternMatch);
        this.config.setContentNegotiationManager(getContentNegotiationManager());
        // 执行父类方法，建立url与controller映射关系
        super.afterPropertiesSet();
    }
}
public abstract class AbstractHandlerMethodMapping<T> extends AbstractHandlerMapping implements InitializingBean {
	public void afterPropertiesSet() {
		initHandlerMethods();
	}
    protected void initHandlerMethods() {
		if (logger.isDebugEnabled()) {
			logger.debug("Looking for request mappings in application context: " + getApplicationContext());
		}
		// 获取IOC容器中所有Bean的名称
		String[] beanNames = (this.detectHandlerMethodsInAncestorContexts ?
				BeanFactoryUtils.beanNamesForTypeIncludingAncestors(getApplicationContext(), Object.class) :
				getApplicationContext().getBeanNamesForType(Object.class));

		for (String beanName : beanNames) {
		    // 不以scopedTarget.前缀开头，作用域代理后面的目标Bean的Bean名称前缀
			if (!beanName.startsWith(SCOPED_TARGET_NAME_PREFIX)) {
				Class<?> beanType = null;
				try {
				    // 获取class类型
					beanType = getApplicationContext().getType(beanName);
				}
				catch (Throwable ex) {
					// An unresolvable bean type, probably from a lazy bean - let's ignore it.
					if (logger.isDebugEnabled()) {
						logger.debug("Could not resolve target class for bean with name '" + beanName + "'", ex);
					}
				}
				// class类型 != null && 是否控制器（存在@Controller和@RequestMapping注解）
				if (beanType != null && isHandler(beanType)) {
					detectHandlerMethods(beanName);
				}
			}
		}
		handlerMethodsInitialized(getHandlerMethods());
	}
    protected void detectHandlerMethods(final Object handler) {
        // 获取class类型
		Class<?> handlerType = (handler instanceof String ?
				getApplicationContext().getType((String) handler) : handler.getClass());
		final Class<?> userType = ClassUtils.getUserClass(handlerType);
        // 获取方法对象Method和RequestMappingInfo的对应关系
		Map<Method, T> methods = MethodIntrospector.selectMethods(userType,
				new MethodIntrospector.MetadataLookup<T>() {
					@Override
					public T inspect(Method method) {
						try {
						    // 获取RequestMappingInfo对象（封装了类及方法级别的@RequestMapping注解信息）
							return getMappingForMethod(method, userType);
						}
						catch (Throwable ex) {
							throw new IllegalStateException("Invalid mapping on handler class [" +
									userType.getName() + "]: " + method, ex);
						}
					}
				});
		if (logger.isDebugEnabled()) {
			logger.debug(methods.size() + " request handler methods found on " + userType + ": " + methods);
		}
		for (Map.Entry<Method, T> entry : methods.entrySet()) {
		    // 获取方法对象
			Method invocableMethod = AopUtils.selectInvocableMethod(entry.getKey(), userType);
			// 获取RequestMappingInfo对象
			T mapping = entry.getValue();
			// 注册handler（controller），方法及URL的映射关系
			registerHandlerMethod(handler, invocableMethod, mapping);
		}
	}
    protected void registerHandlerMethod(Object handler, Method method, T mapping) {
        this.mappingRegistry.register(mapping, handler, method);
    }
}

@Target({ElementType.METHOD, ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Mapping
public @interface RequestMapping {
	// 请求映射名称
	String name() default "";

	// url映射路径，等价于path属性
	// 数组类型，同一个控制器支持多个路由请求，支持ant风格和通配符表达式
	@AliasFor("path")
	String[] value() default {};

	// url映射路径，等价于value属性
	// 数组类型，同一个控制器支持多个路由请求，支持ant风格和通配符表达式
	@AliasFor("value")
	String[] path() default {};

	// Http请求方法，支持GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS, TRACE请求
    // 默认请求方法是GET请求,同时可以支持多个请求类型
	RequestMethod[] method() default {};

	// 此属性可以指定同一个URL路由由多个控制器来处理，而参数的值不同
	String[] params() default {};

	// 请求头中必须包含指定的参数才可以处理请求
	String[] headers() default {};

    // 匹配请求Content-Type的媒体类型，示例如下：
    // consumes = "text/plain"
    // consumes = {"text/plain", "application/*"}
    // consumes = MediaType.TEXT_PLAIN_VALUE
    // 也可以使用!来表示非
	String[] consumes() default {};

	// 定义控制器处理程序生成的数据媒体类型，示例如下：
    // produces = "text/plain"
    // produces = {"text/plain", "application/*"}
    // produces = MediaType.TEXT_PLAIN_VALUE
    // produces = "text/plain;charset=UTF-8"
    // 也可以使用!来表示非
	String[] produces() default {};
}
public class RequestMappingHandlerMapping extends RequestMappingInfoHandlerMapping
		implements MatchableHandlerMapping, EmbeddedValueResolverAware {
    protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {
        // 解析方法级别@RequestMapping注解信息
        RequestMappingInfo info = createRequestMappingInfo(method);
        if (info != null) {
            // 解析类级别@RequestMapping注解信息
            RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType);
            if (typeInfo != null) {
                // 将类级别和方法级别的@RequestMapping注解信息对象进行合并
                info = typeInfo.combine(info);
            }
        }
        return info;
    }
    private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {
        // 获取@RequestMapping注解类对象
        RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class);
        RequestCondition<?> condition = (element instanceof Class ?
                getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element));
        // 将注解信息封装到RequestMappingInfo对象，返回
        return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null);
    }
    protected RequestMappingInfo createRequestMappingInfo(
            RequestMapping requestMapping, RequestCondition<?> customCondition) {
        return RequestMappingInfo
                .paths(resolveEmbeddedValuesInPatterns(requestMapping.path())) // 解析路径信息
                .methods(requestMapping.method()) // 请求方法，如GET、POST
                .params(requestMapping.params()) // 请求参数数据
                .headers(requestMapping.headers()) // 请求头数据
                .consumes(requestMapping.consumes()) // 控制器可以接收的数据媒体类型
                .produces(requestMapping.produces()) // 控制器处理完成后响应的数据类型
                .mappingName(requestMapping.name()) // 参数名称
                .customCondition(customCondition)
                .options(this.config)
                .build();
    }
    class MappingRegistry {
        public void register(T mapping, Object handler, Method method) {
            this.readWriteLock.writeLock().lock();
            try {
                // 将处理器中带有@RequestMapping注解方法封装成HandlerMethod实例
                HandlerMethod handlerMethod = createHandlerMethod(handler, method);
                // 确保url映射关系的唯一性
                assertUniqueMethodMapping(handlerMethod, mapping);

                if (logger.isInfoEnabled()) {
                    logger.info("Mapped \"" + mapping + "\" onto " + handlerMethod);
                }
                // 保存RequestMappingInfo对象与处理器方法的映射关系
                this.mappingLookup.put(mapping, handlerMethod);

                List<String> directUrls = getDirectUrls(mapping);
                for (String url : directUrls) {
                    // 保存请求URL与RequestMappingInfo对象的映射关系
                    this.urlLookup.add(url, mapping);
                }

                String name = null;
                if (getNamingStrategy() != null) {
                    // UC#getUserById
                    name = getNamingStrategy().getName(handlerMethod, mapping);
                    addMappingName(name, handlerMethod);
                }
                // http跨域配置
                CorsConfiguration corsConfig = initCorsConfiguration(handler, method, mapping);
                if (corsConfig != null) {
                    this.corsLookup.put(handlerMethod, corsConfig);
                }
                // 建立url与controller映射关系
                this.registry.put(mapping, new MappingRegistration<T>(mapping, handlerMethod, directUrls, name));
            }
            finally {
                this.readWriteLock.writeLock().unlock();
            }
        }
    }
}
