spring tx事务源码解析--获取事务状态，并开启事务
public abstract class AbstractPlatformTransactionManager implements PlatformTransactionManager, Serializable {
    // 获取事务状态
	public final TransactionStatus getTransaction(TransactionDefinition definition) throws TransactionException {
	    // 获取当前的事务对象
		Object transaction = doGetTransaction();
		// 缓存调试标志，以避免重复检查
		boolean debugEnabled = logger.isDebugEnabled();
		if (definition == null) {
			// 未自定义事务属性，则使用默认属性值
			definition = new DefaultTransactionDefinition();
		}
        // 是否已经存在事务(即已启动的事务)
		if (isExistingTransaction(transaction)) {
			// 处理当前存在的事务，根据事务传播行为获取事务状态并返回
			return handleExistingTransaction(definition, transaction, debugEnabled);
		}
		// 检查事务超时时间设置，不可小于默认值-1
		if (definition.getTimeout() < TransactionDefinition.TIMEOUT_DEFAULT) {
			throw new InvalidTimeoutException("Invalid transaction timeout", definition.getTimeout());
		}
		// 当前不存在事务，但事务传播行为被设置为MANDATORY，抛出异常
		if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_MANDATORY) {
			throw new IllegalTransactionStateException(
					"No existing transaction found for transaction marked with propagation 'mandatory'");
		} // 当前不存在事务，事务传播行为为REQUIRED/REQUIRES_NEW/NESTED之一，需要新开启事务，且加上事务同步
		else if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRED ||
				definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRES_NEW ||
				definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NESTED) {
		    // 挂起当前事务
			SuspendedResourcesHolder suspendedResources = suspend(null);
			if (debugEnabled) {
				logger.debug("Creating new transaction with name [" + definition.getName() + "]: " + definition);
			}
			try {
			    // 是否开启事务同步
				boolean newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);
				// 构建事务状态对象DefaultTransactionStatus
				DefaultTransactionStatus status = newTransactionStatus(
						definition, transaction, true, newSynchronization, debugEnabled, suspendedResources);
				// 开启事务
				doBegin(transaction, definition);
				// 初始化当前事务同步，将事务相关信息绑定到当前线程ThreadLocal变量中
				prepareSynchronization(status, definition);
				return status;
			}
			catch (RuntimeException ex) {
			    // 恢复事务同步
                resume(null, suspendedResources);
                throw ex;
            }
			......
		}
		else {
			// 当前不存在事务，自定义了隔离级别：没有实际事务，但可能存在同步
			if (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT && logger.isWarnEnabled()) {
				logger.warn("Custom isolation level specified but no actual transaction initiated; " +
						"isolation level will effectively be ignored: " + definition);
			}
			boolean newSynchronization = (getTransactionSynchronization() == SYNCHRONIZATION_ALWAYS);
			// 构建事务状态对象DefaultTransactionStatus返回
			return prepareTransactionStatus(definition, null, true, newSynchronization, debugEnabled, null);
		}
	}
	private TransactionStatus handleExistingTransaction(
            TransactionDefinition definition, Object transaction, boolean debugEnabled)
            throws TransactionException {
        // 事务的传播行为 == NEVER(必须在一个没有的事务中执行,否则抛出异常(与Propagation.MANDATORY相反))
        if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NEVER) {
            throw new IllegalTransactionStateException(
                    "Existing transaction found for transaction marked with propagation 'never'");
        }
        // 事务的传播行为 == NOT_SUPPORTED(不支持当前事务，现有同步将被挂起)
        if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NOT_SUPPORTED) {
            if (debugEnabled) {
                logger.debug("Suspending current transaction");
            }
            // 挂起当前事务
            Object suspendedResources = suspend(transaction);
            // 是否开启事务同步
            boolean newSynchronization = (getTransactionSynchronization() == SYNCHRONIZATION_ALWAYS);
            // 构建事务状态对象DefaultTransactionStatus返回
            return prepareTransactionStatus(
                    definition, null, false, newSynchronization, debugEnabled, suspendedResources);
        }
        // 事务的传播行为 == REQUIRES_NEW(不管是否存在事务,都创建一个新的事务,原来的挂起,新的执行完毕,继续执行老的事务)
        if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRES_NEW) {
            if (debugEnabled) {
                logger.debug("Suspending current transaction, creating new transaction with name [" +
                        definition.getName() + "]");
            }
            // 挂起当前事务
            SuspendedResourcesHolder suspendedResources = suspend(transaction);
            try {
                boolean newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);
                DefaultTransactionStatus status = newTransactionStatus(
                        definition, transaction, true, newSynchronization, debugEnabled, suspendedResources);
                doBegin(transaction, definition);
                prepareSynchronization(status, definition);
                return status;
            }
            ......
        }
        // 事务的传播行为 == NESTED(如果当前事务存在，则在嵌套事务中执行)
        if (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NESTED) {
            if (!isNestedTransactionAllowed()) {
                throw new NestedTransactionNotSupportedException(
                        "Transaction manager does not allow nested transactions by default - " +
                        "specify 'nestedTransactionAllowed' property with value 'true'");
            }
            if (debugEnabled) {
                logger.debug("Creating nested transaction with name [" + definition.getName() + "]");
            }
            // 是否为嵌套事务使用保存点，非JTA事务走这个分支
            // 默认值为true，JtaTransactionManager重写了该方法，返回false，
            if (useSavepointForNestedTransaction()) {
                // Create savepoint within existing Spring-managed transaction,
                // through the SavepointManager API implemented by TransactionStatus.
                // Usually uses JDBC 3.0 savepoints. Never activates Spring synchronization.
                DefaultTransactionStatus status =
                        prepareTransactionStatus(definition, transaction, false, false, debugEnabled, null);
                // 创建一个保存点并为事务保存它
                status.createAndHoldSavepoint();
                return status;
            }
            else {
                // Nested transaction through nested begin and commit/rollback calls.
                // Usually only for JTA: Spring synchronization might get activated here
                // in case of a pre-existing JTA transaction.
                boolean newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);
                DefaultTransactionStatus status = newTransactionStatus(
                        definition, transaction, true, newSynchronization, debugEnabled, null);
                doBegin(transaction, definition);
                prepareSynchronization(status, definition);
                return status;
            }
        }
        // 事务的传播行为 == SUPPORTS or REQUIRED.
        if (debugEnabled) {
            logger.debug("Participating in existing transaction");
        }
        if (isValidateExistingTransaction()) {
            // 设置事务隔离级别不是默认值
            if (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT) {
                // 获取当前事务的隔离级别
                Integer currentIsolationLevel = TransactionSynchronizationManager.getCurrentTransactionIsolationLevel();
                // 当前事务的隔离级别为空 || 当前事务的隔离级别与属性设置的隔离级别不一致
                if (currentIsolationLevel == null || currentIsolationLevel != definition.getIsolationLevel()) {
                    Constants isoConstants = DefaultTransactionDefinition.constants;
                    throw new IllegalTransactionStateException("Participating transaction with definition [" +
                            definition + "] specifies isolation level which is incompatible with existing transaction: " +
                            (currentIsolationLevel != null ?
                                    isoConstants.toCode(currentIsolationLevel, DefaultTransactionDefinition.PREFIX_ISOLATION) :
                                    "(unknown)"));
                }
            }
            // 属性未设置只读，如果当前事务却是只读，则抛异常
            if (!definition.isReadOnly()) {
                if (TransactionSynchronizationManager.isCurrentTransactionReadOnly()) {
                    throw new IllegalTransactionStateException("Participating transaction with definition [" +
                            definition + "] is not marked as read-only but existing transaction is");
                }
            }
        }
        boolean newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);
        return prepareTransactionStatus(definition, transaction, false, newSynchronization, debugEnabled, null);
    }
    // 事务挂起
    protected final SuspendedResourcesHolder suspend(Object transaction) throws TransactionException {
        // 当前线程存在事务同步
        if (TransactionSynchronizationManager.isSynchronizationActive()) {
            List<TransactionSynchronization> suspendedSynchronizations = doSuspendSynchronization();
            try {
                Object suspendedResources = null;
                if (transaction != null) {
                    // 事务挂起，清空当前JDBC连接，解绑数据源dataSource
                    suspendedResources = doSuspend(transaction);
                }
                // 获取当前事务的名称/只读状态/隔离级别/事务状态，并且与当前线程解绑
                String name = TransactionSynchronizationManager.getCurrentTransactionName();
                TransactionSynchronizationManager.setCurrentTransactionName(null);
                boolean readOnly = TransactionSynchronizationManager.isCurrentTransactionReadOnly();
                TransactionSynchronizationManager.setCurrentTransactionReadOnly(false);
                Integer isolationLevel = TransactionSynchronizationManager.getCurrentTransactionIsolationLevel();
                TransactionSynchronizationManager.setCurrentTransactionIsolationLevel(null);
                boolean wasActive = TransactionSynchronizationManager.isActualTransactionActive();
                TransactionSynchronizationManager.setActualTransactionActive(false);
                // 封装SuspendedResourcesHolder（保存被挂起事务的各种状态）对象返回
                return new SuspendedResourcesHolder(
                        suspendedResources, suspendedSynchronizations, name, readOnly, isolationLevel, wasActive);
            }
            // 出现异常，则恢复当前事务状态
            ......
        }
        else if (transaction != null) {
            // 当前线程不存在同步，事务不为空，挂起事务
            Object suspendedResources = doSuspend(transaction);
            return new SuspendedResourcesHolder(suspendedResources);
        }
        else {
            // 当前线程不存在同步，事务为空
            return null;
        }
    }
    private List<TransactionSynchronization> doSuspendSynchronization() {
        // 获取当前线程所有事务同步
        List<TransactionSynchronization> suspendedSynchronizations =
                TransactionSynchronizationManager.getSynchronizations();
        // 遍历暂停所有当前同步
        for (TransactionSynchronization synchronization : suspendedSynchronizations) {
            synchronization.suspend();
        }
        // 解绑当前线程事务同步
        TransactionSynchronizationManager.clearSynchronization();
        return suspendedSynchronizations;
    }
    // 恢复指定挂起事务
	protected final void resume(Object transaction, SuspendedResourcesHolder resourcesHolder)
			throws TransactionException {
        // 数据源持有者dataSource != null
		if (resourcesHolder != null) {
		    // 获取数据源对象dataSource
			Object suspendedResources = resourcesHolder.suspendedResources;
			if (suspendedResources != null) {
			    // 将数据源对象dataSource绑定到当前线程
				doResume(transaction, suspendedResources);
			}
			List<TransactionSynchronization> suspendedSynchronizations = resourcesHolder.suspendedSynchronizations;
			// 获取当前事务的名称/只读状态/隔离级别/事务状态，并且与当前线程绑定
			if (suspendedSynchronizations != null) {
				TransactionSynchronizationManager.setActualTransactionActive(resourcesHolder.wasActive);
				TransactionSynchronizationManager.setCurrentTransactionIsolationLevel(resourcesHolder.isolationLevel);
				TransactionSynchronizationManager.setCurrentTransactionReadOnly(resourcesHolder.readOnly);
				TransactionSynchronizationManager.setCurrentTransactionName(resourcesHolder.name);
				doResumeSynchronization(suspendedSynchronizations);
			}
		}
	}
}
public class DataSourceTransactionManager extends AbstractPlatformTransactionManager
		implements ResourceTransactionManager, InitializingBean {
    protected void doBegin(Object transaction, TransactionDefinition definition) {
        // 获取当前事务
        DataSourceTransactionManager.DataSourceTransactionObject txObject = (DataSourceTransactionManager.DataSourceTransactionObject)transaction;
        Connection con = null;
        try {
            // 未绑定JDBC连接资源 || JDBC连接资源与当前事务同步
            if (!txObject.hasConnectionHolder() || txObject.getConnectionHolder().isSynchronizedWithTransaction()) {
                // 获取JDBC连接对象
                Connection newCon = this.dataSource.getConnection();
                if (this.logger.isDebugEnabled()) {
                    this.logger.debug("Acquired Connection [" + newCon + "] for JDBC transaction");
                }
                // 当前事务绑定JDBC连接资源
                txObject.setConnectionHolder(new ConnectionHolder(newCon), true);
            }
            // 设置新的连接为事务同步中
            txObject.getConnectionHolder().setSynchronizedWithTransaction(true);
            // 获取连接对象
            con = txObject.getConnectionHolder().getConnection();
            // 设置当前事务隔离级别
            Integer previousIsolationLevel = DataSourceUtils.prepareConnectionForTransaction(con, definition);
            txObject.setPreviousIsolationLevel(previousIsolationLevel);
            // 是否自动提交事务，如果是则切换为手动提交
            if (con.getAutoCommit()) {
                txObject.setMustRestoreAutoCommit(true);
                if (this.logger.isDebugEnabled()) {
                    this.logger.debug("Switching JDBC Connection [" + con + "] to manual commit");
                }
                con.setAutoCommit(false);
            }
            // 设置事务为只读
            this.prepareTransactionalConnection(con, definition);
            // 设置当前事务为开启状态
            txObject.getConnectionHolder().setTransactionActive(true);
            int timeout = this.determineTimeout(definition);
            if (timeout != -1) {
                // 设置超时时间
                txObject.getConnectionHolder().setTimeoutInSeconds(timeout);
            }
            // 如果当前事务绑定新的JDBC连接资源，则将连接资源与当前线程绑定
            if (txObject.isNewConnectionHolder()) {
                TransactionSynchronizationManager.bindResource(this.getDataSource(), txObject.getConnectionHolder());
            }
        } catch (Throwable var7) {
            // 如果当前事务绑定新的JDBC连接资源，关闭连接，解绑事务与连接资源
            if (txObject.isNewConnectionHolder()) {
                DataSourceUtils.releaseConnection(con, this.dataSource);
                txObject.setConnectionHolder((ConnectionHolder)null, false);
            }
            throw new CannotCreateTransactionException("Could not open JDBC Connection for transaction", var7);
        }
    }
}
